<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[putaindecode.io]]></title><description><![CDATA[putaindecode.io]]></description><link>http://putaindecode.io</link><generator>RSS for Node</generator><lastBuildDate>Wed, 18 Oct 2017 18:48:31 GMT</lastBuildDate><atom:link href="http://putaindecode.io/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Podcast 7: React 16, GraphQL, IDLs, RPCs et mauvaise foi sur l'iPhone X]]></title><description><![CDATA[<p>On se retrouve pour un nouvel épisode avec un joli programme: on vous y parle de React 16, de GraphQL, des IDLs et des RPCs. En plus de ça, on vous offre une belle dose de mauvaise foi dans un débat sur l'iPhone X.</p>
<p>Moi, Matthias (<a href="https://twitter.com/bloodyowl">https://twitter.com/bloodyowl</a>), vous présente ce podcast en compagnie de mes fidèles acolytes :</p>
<ul>
<li>Mathieu (<a href="https://twitter.com/Zoontek">https://twitter.com/Zoontek</a>)</li>
<li>Georges (<a href="https://twitter.com/skinnyfoetusboy">https://twitter.com/skinnyfoetusboy</a>)</li>
</ul>
<p>Les petits liens qui vont bien :</p>
<ul>
<li>React 16: <a href="https://reactjs.org/blog/2017/09/26/react-v16.0.html">https://reactjs.org/blog/2017/09/26/react-v16.0.html</a></li>
<li>GraphQL: <a href="http://graphql.org">http://graphql.org</a></li>
<li>Relay: <a href="https://facebook.github.io/relay/">https://facebook.github.io/relay/</a></li>
<li>Apollo: <a href="https://www.apollodata.com">https://www.apollodata.com</a></li>
<li>ProtoBuf: <a href="https://github.com/google/protobuf">https://github.com/google/protobuf</a></li>
<li>Thrift: <a href="https://thrift.apache.org">https://thrift.apache.org</a></li>
<li>gRPC: <a href="https://grpc.io">https://grpc.io</a></li>
<li>iPhone X: <a href="https://www.apple.com/iphone-x/">https://www.apple.com/iphone-x/</a></li>
</ul>
<p>La track du générique: <a href="https://soundcloud.com/matthias-le-brun/arrow">https://soundcloud.com/matthias-le-brun/arrow</a></p>
<iframe width="100%" height="300" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/347500441&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=true&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=false&amp;visual=true"></iframe>
<ul>
<li>Le <a href="http://feeds.soundcloud.com/users/soundcloud:users:273901232/sounds.rss">RSS</a></li>
<li>Sur iTunes : <a href="https://itunes.apple.com/fr/podcast/putain-de-code-!/id1185311825?l=en&#x26;mt=2">Putain de Code</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/podcast/7/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/podcast/7/</guid><pubDate>Wed, 18 Oct 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Utiliser Reason avec JavaScript]]></title><description><![CDATA[<p>Dans un <a href="/fr/articles/reason/introduction-reason/">précédent article</a>, on vous présentait une nouvelle syntaxe pour OCaml: <a href="https://reasonml.github.io">ReasonML</a>, elle rend le langage plus accessible en le rapprochant de JavaScript moderne.</p>
<p>À l'aide du projet <a href="https://bucklescript.github.io/bucklescript/Manual.html">BuckleScript</a> qui supporte Reason nativement, on peut compiler notre code Reason vers JavaScript très facilement. Le créateur de BuckleScript utilisait à l'origine un autre projet appelé <a href="http://ocsigen.org/js_of_ocaml/">js_of_ocaml</a>. Trouvant qu'il serait possible d'optimiser et de rendre plus lisible le code JavaScript en sortie si le compiler commençait son travail à une étape plus haut niveau (une représentation du programme contenant des informations supplémentaires, alors que js_of_ocaml utilise du bytecode), il propose ce changement à la team js_of_ocaml qui refuse, et décide donc de se lancer dans le projet qui deviendra BuckleScript.</p>
<p>Pour démarrer un projet avec BuckleScript et Reason, on ouvre son terminal, et c'est parti:</p>
<p>On installe BuckleScript:</p>
<pre><code class="hljs language-console">$ npm <span class="hljs-keyword">install</span> -g bs-platform</code></pre>
<p>On initialise le projet:</p>
<pre><code class="hljs language-console">$ bsb -init <span class="hljs-keyword">my</span>-app -theme basic-reason</code></pre>
<p>Hop, votre projet est prêt dans <code>my-app</code>.</p>
<p>Maintenant la question est: comment est-ce que je peux utiliser du JS dans Reason et vice-versa ?</p>
<h2 id="les-ffi-ou-foreign-function-interface"><a href="#les-ffi-ou-foreign-function-interface" class="phenomic-HeadingAnchor">#</a>Les FFI (ou Foreign Function Interface)</h2>
<p>OCaml gère naturellement les <code>FFI</code>, notamment pour appeler des fonctions <code>C</code> lorsqu'il compile vers du code natif.</p>
<p>BuckleScript vient les overloader pour les adapter à JavaScript.</p>
<p>Créons une FFI pour la fonction <code>alert</code> :</p>
<pre><code class="hljs language-reason"><span class="hljs-keyword">external</span> alert : <span class="hljs-built_in">string</span> => <span class="hljs-built_in">unit</span> = <span class="hljs-string">""</span> [@@bs.<span class="hljs-keyword">val</span>];</code></pre>
<p>On définit:</p>
<ul>
<li>une fonction externe nommée <code>alert</code></li>
<li>qui prend une <code>string</code> et ne retourne <em>rien</em> (ici représenté par la valeur <code>unit</code>)</li>
<li>qui est une valeur à simplement récupérer (<code>[@@bs.val]</code>)</li>
</ul>
<p>Si on regarde le code JavaScript en sortie, c'est vide. En effet, <code>external</code> est un moyen de définir comment accéder à une valeur ainsi que son type. Si en revanche on utilise la function <code>alert</code> dans le module:</p>
<pre><code class="hljs language-reason"><span class="hljs-keyword">external</span> alert : <span class="hljs-built_in">string</span> => <span class="hljs-built_in">unit</span> = <span class="hljs-string">""</span> [@@bs.<span class="hljs-keyword">val</span>];

alert <span class="hljs-string">"Hello!"</span>;</code></pre>
<p>On voit dans l'output que BuckleScript a <em>inliné</em> l'appel de <code>alert</code>, il n'a pas crée de représentation intermédiaire.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE</span>
<span class="hljs-meta">'use strict'</span>;


alert(<span class="hljs-string">"Hello!"</span>);

<span class="hljs-comment">/*  Not a pure module */</span></code></pre>
<p>Maintenant amusons nous à créer des bindings pour jQuery, juste pour le fun:</p>
<pre><code class="hljs language-reason">/* <span class="hljs-type">On</span> crée un <span class="hljs-keyword">type</span> opaque pour représenter un objet jQuery */
<span class="hljs-keyword">type</span> jQuery;

/* <span class="hljs-type">On</span> <span class="hljs-keyword">type</span> le <span class="hljs-keyword">module</span> jQuery */
<span class="hljs-keyword">external</span> jQuery : <span class="hljs-built_in">string</span> => jQuery = <span class="hljs-string">"jquery"</span> [@@bs.<span class="hljs-keyword">module</span>];

/* <span class="hljs-type">On</span> <span class="hljs-keyword">type</span> la méthod `on`, <span class="hljs-type">BuckleScript</span> peut naturellement typer
  le pattern de chaining, assez commun en <span class="hljs-type">JS</span>, à l'aide de l'annotation
  `bs.send.pipe: <span class="hljs-keyword">type</span>` */
<span class="hljs-keyword">external</span> on : <span class="hljs-built_in">string</span> => (<span class="hljs-type">Dom</span>.event => <span class="hljs-built_in">unit</span>) => jQuery = <span class="hljs-string">""</span> [@@bs.send.pipe: jQuery];

jQuery <span class="hljs-string">".selector"</span>
  |> on <span class="hljs-string">"click"</span> (<span class="hljs-keyword">fun</span> _ => alert <span class="hljs-string">"hey"</span>);</code></pre>
<p>Ce qui va nous sortir:</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE</span>
<span class="hljs-meta">'use strict'</span>;

<span class="hljs-keyword">var</span> JQuery = <span class="hljs-built_in">require</span>(<span class="hljs-string">"jquery"</span>);

JQuery(<span class="hljs-string">".selector"</span>).on(<span class="hljs-string">"click"</span>, (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
        alert(<span class="hljs-string">"hey"</span>);
        <span class="hljs-keyword">return</span> <span class="hljs-comment">/* () */</span><span class="hljs-number">0</span>;
      }));

<span class="hljs-comment">/*  Not a pure module */</span></code></pre>
<p>Comme on peut le constater, le code de sortie ressemble beaucoup à ce qu'on pourrait écrire à la main.</p>
<p>Pour en savoir un peu plus sur les FFI JavaScript:</p>
<ul>
<li><a href="https://bucklescript.github.io/bucklescript/Manual.html">La documentation de BuckleScript</a></li>
<li><a href="https://github.com/reasonml-community">Les projets de bindings crées par la communauté</a> (ceux nommés <code>bs-{nom-de-lib-js}</code>)</li>
</ul>
<h2 id="les-objets"><a href="#les-objets" class="phenomic-HeadingAnchor">#</a>Les objets</h2>
<p>On peut directement utiliser des objets JavaScript en Reason. Pour accéder à une propriété, on utilise <code>##</code>.</p>
<pre><code class="hljs language-reason">myJsObject##property</code></pre>
<p>Ça dépanne, mais au sein de notre code Reason, on préférera bien souvent utiliser des records: ils ont une représentation plus légère et sont par défaut immutables. Pour effectuer une conversion, on procède de la manière suivante:</p>
<pre><code class="hljs language-reason"><span class="hljs-keyword">type</span> jsUser =
  <span class="hljs-type">Js</span>.t {
    .
    id : <span class="hljs-built_in">string</span>,
    username : <span class="hljs-built_in">string</span>,
    /* valeur pouvant être null, undefined, ou la valeur */
    birthdate : <span class="hljs-type">Js</span>.<span class="hljs-type">Null_undefined</span>.t <span class="hljs-built_in">string</span>,
    /* <span class="hljs-string">"light"</span> ou <span class="hljs-string">"dark"</span>, les enums sont souvent représentés par des strings en <span class="hljs-type">JS</span> */
    theme : <span class="hljs-built_in">string</span>
  };

/* <span class="hljs-type">En</span> <span class="hljs-type">Reason</span>, les enums sont représentés par des variants */
<span class="hljs-keyword">type</span> theme =
  | <span class="hljs-type">Light</span>
  | <span class="hljs-type">Dark</span>;

<span class="hljs-keyword">type</span> user = {
  id: <span class="hljs-built_in">string</span>,
  username: <span class="hljs-built_in">string</span>,
  /* pas de null ou undefined, on utilise un <span class="hljs-keyword">type</span> <span class="hljs-built_in">option</span> */
  birthdate: <span class="hljs-built_in">option</span> <span class="hljs-built_in">string</span>,
  theme
};

/* une fonction de transformation <span class="hljs-type">JS</span> -> <span class="hljs-type">Reason</span> */
<span class="hljs-keyword">let</span> fromJs jsUser => {
  id: jsUser##id,
  username: jsUser##username,
  /* <span class="hljs-type">BuckleScript</span> propose des helpers pour les conversions */
  birthdate: <span class="hljs-type">Js</span>.<span class="hljs-type">Null_undefined</span>.to_opt jsUser##birthdate,
  theme:
    switch jsUser##theme {
    | <span class="hljs-string">"dark"</span> => <span class="hljs-type">Dark</span>
    | <span class="hljs-string">"light"</span>
    /* <span class="hljs-type">On</span> match une chaîne de caractère, le match n'est pas exhaustif,
         on doit donc définir la valeur de fallback (par defaut) à l'aide
         de `_`
       */
    | _ => <span class="hljs-type">Light</span>
    }
};

/* <span class="hljs-type">Pour</span> créer un objet <span class="hljs-type">JS</span> en <span class="hljs-type">Reason</span>, il suffit de l'écrire comme un
     record, mais avec des clés entre quotes, comme du <span class="hljs-type">JSON</span>.
   */
<span class="hljs-keyword">let</span> toJs user => {
  <span class="hljs-string">"id"</span>: user.id,
  <span class="hljs-string">"username"</span>: user.username,
  <span class="hljs-string">"birthdate"</span>: <span class="hljs-type">Js</span>.<span class="hljs-type">Null_undefined</span>.from_opt user.birthdate,
  <span class="hljs-string">"theme"</span>:
    switch user.theme {
    | <span class="hljs-type">Light</span> => <span class="hljs-string">"light"</span>
    | <span class="hljs-type">Dark</span> => <span class="hljs-string">"dark"</span>
    }
};</code></pre>
<p>Le code en sortie:</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE</span>
<span class="hljs-meta">'use strict'</span>;

<span class="hljs-keyword">var</span> Js_primitive      = <span class="hljs-built_in">require</span>(<span class="hljs-string">"bs-platform/lib/js/js_primitive.js"</span>);
<span class="hljs-keyword">var</span> Js_null_undefined = <span class="hljs-built_in">require</span>(<span class="hljs-string">"bs-platform/lib/js/js_null_undefined.js"</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fromJs</span>(<span class="hljs-params">jsUser</span>) </span>{
  <span class="hljs-keyword">var</span> match = jsUser.theme;
  <span class="hljs-keyword">var</span> tmp;
  <span class="hljs-keyword">switch</span> (match) {
    <span class="hljs-keyword">case</span> <span class="hljs-string">"dark"</span> :
        tmp = <span class="hljs-comment">/* Dark */</span><span class="hljs-number">1</span>;
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-string">"light"</span> :
        tmp = <span class="hljs-comment">/* Light */</span><span class="hljs-number">0</span>;
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">default</span>:
      tmp = <span class="hljs-comment">/* Light */</span><span class="hljs-number">0</span>;
  }
  <span class="hljs-keyword">return</span> <span class="hljs-comment">/* record */</span>[
          <span class="hljs-comment">/* id */</span>jsUser.id,
          <span class="hljs-comment">/* username */</span>jsUser.username,
          <span class="hljs-comment">/* birthdate */</span>Js_primitive.null_undefined_to_opt(jsUser.birthdate),
          <span class="hljs-comment">/* theme */</span>tmp
        ];
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toJs</span>(<span class="hljs-params">user</span>) </span>{
  <span class="hljs-keyword">var</span> match = user[<span class="hljs-comment">/* theme */</span><span class="hljs-number">3</span>];
  <span class="hljs-keyword">return</span> {
          <span class="hljs-attr">id</span>: user[<span class="hljs-comment">/* id */</span><span class="hljs-number">0</span>],
          <span class="hljs-attr">username</span>: user[<span class="hljs-comment">/* username */</span><span class="hljs-number">1</span>],
          <span class="hljs-attr">birthdate</span>: Js_null_undefined.from_opt(user[<span class="hljs-comment">/* birthdate */</span><span class="hljs-number">2</span>]),
          <span class="hljs-attr">theme</span>: match !== <span class="hljs-number">0</span> ? <span class="hljs-string">"dark"</span> : <span class="hljs-string">"light"</span>
        };
}

exports.fromJs = fromJs;
exports.toJs   = toJs;
<span class="hljs-comment">/* No side effect */</span></code></pre>
<h2 id="les-standard-libs"><a href="#les-standard-libs" class="phenomic-HeadingAnchor">#</a>Les standard-libs</h2>
<p>Si le besoin s'en fait sentir, BuckleScript propose naturellement la stdlib de JavaScript.</p>
<pre><code class="hljs language-reason">let myArray = [|<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>|];

myArray
  |> Js.Array.map (<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">item</span></span> => item * <span class="hljs-number">2</span>)
  |> Js.Array.reduce (<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">acc</span></span> item => acc + item) <span class="hljs-number">0</span>;</code></pre>
<p>vous sortira:</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE</span>
<span class="hljs-meta">'use strict'</span>;


<span class="hljs-keyword">var</span> myArray = <span class="hljs-comment">/* array */</span>[
  <span class="hljs-number">1</span>,
  <span class="hljs-number">2</span>,
  <span class="hljs-number">3</span>,
  <span class="hljs-number">4</span>,
  <span class="hljs-number">5</span>
];

myArray.map((<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{
          <span class="hljs-keyword">return</span> (item &#x3C;&#x3C; <span class="hljs-number">1</span>);
        })).reduce((<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">acc, item</span>) </span>{
        <span class="hljs-keyword">return</span> acc + item | <span class="hljs-number">0</span>;
      }), <span class="hljs-number">0</span>);

exports.myArray = myArray;
<span class="hljs-comment">/*  Not a pure module */</span></code></pre>
<h2 id="la-technique-bourrin"><a href="#la-technique-bourrin" class="phenomic-HeadingAnchor">#</a>La technique bourrin</h2>
<p>Pour les cas extrêmes ou vous voulez juste balancer une fonction JS, vous pouvez:</p>
<pre><code class="hljs language-reason"><span class="hljs-comment">/* %bs.raw pour une expression, %%bs.raw pour un bloc de code arbitraire */</span>
<span class="hljs-keyword">let</span> log: <span class="hljs-function"><span class="hljs-params">string</span> =></span> unit = [%bs.raw {|
  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) </span>{
    <span class="hljs-built_in">console</span>.log(a);
  }
|}];

log <span class="hljs-string">"ok"</span>;</code></pre>
<p>qui vous sort un joli:</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE</span>
<span class="hljs-meta">'use strict'</span>;

<span class="hljs-keyword">var</span> Curry = <span class="hljs-built_in">require</span>(<span class="hljs-string">"bs-platform/lib/js/curry.js"</span>);

<span class="hljs-keyword">var</span> log = (
  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) </span>{
    <span class="hljs-built_in">console</span>.log(a);
  }
);

Curry._1(log, <span class="hljs-string">"ok"</span>);

exports.log = log;
<span class="hljs-comment">/* log Not a pure module */</span></code></pre>
<h2 id="conclusion"><a href="#conclusion" class="phenomic-HeadingAnchor">#</a>Conclusion</h2>
<p>OCaml peut en grande majorité être compilé en JavaScript très simple, parce qu'il partage beaucoup de concepts avec ce dernier. Il est assez simple de créer des ponts entre les deux langages à l'aide des FFI. L'énorme avantage de cette feature, c'est que l'on peut commencer à utiliser Reason incrémentalement sur son projet sans avoir à tout réécrire d'un coup.</p>
<p>Bisous bisous.</p>
]]></description><link>http://putaindecode.io/fr/articles/reason/interop/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/reason/interop/</guid><pubDate>Tue, 10 Oct 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction à ReasonML (ou pourquoi j'ai arrêté d'utiliser JavaScript)]]></title><description><![CDATA[<p>Les bugs c'est chiant, surtout quand on sait qu'on aurait pu les éviter. Avec JavaScript, c'est plus facile d'en avoir que de les éviter.</p>
<p>JavaScript, on ne peut pas y échapper parce que c'est partout, parce que c'est le langage de programmation le plus utilisé sur Terre, et parce que c'est le seul truc qui (pour l'instant) tourne nativement dans le navigateur. Et puis c'est pas si mal, c'est facile de l'apprendre en bidouillant un peu, c'est très permissif et pas trop frustrant pour débuter.</p>
<p>Le problème c'est que c'est facile d'en faire, mais c'est très dur d'en faire <strong>bien</strong> (moins que CSS, mais quand même). On s'est tous déjà retrouvé avec <code>undefined is not a function</code>, <code>null is not an object</code> ou un bon gros <code>[object Object]</code> qui traîne dans la console.</p>
<h2 id="pourquoi-est-ce-que-cest-comme-ça-"><a href="#pourquoi-est-ce-que-cest-comme-%C3%A7a-" class="phenomic-HeadingAnchor">#</a>Pourquoi est-ce que c'est comme ça ?</h2>
<p>JavaScript est un langage dynamiquement et faiblement typé, ce qui veut dire :</p>
<ul>
<li>qu'une fonction ne sait pas ce qu'elle prend ou retourne comme type
d'arguments, c'est à vous de gérer</li>
<li>que le programme n'en a aucune idée non plus tant qu'il n'execute pas
la portion de code</li>
</ul>
<p>Tout ça fait qu'il est très difficile de faire confiance à du code JavaScript.</p>
<figure>
<img src="./js.png" alt="js" />
<figcaption>Source: MIT</figcaption>
</figure>
<p>Il existe Flow et TypeScript (dont on a parlé dans un <a href="/fr/articles/js/flow/">précédent article</a> et un <a href="fr/articles/podcast/3/">podcast</a>), deux projets qui permettent d'apporter du typage statique pour sécuriser son code. Ils contraignent votre usage de JavaScript, mais devront toujours se battre contre sa permissivité.</p>
<p>Ça revient au final à coller des rustines sur vos pneus avant d'aller rouler sur des clous, ça va vous protéger un peu, mais ça reste de base pas bien malin d'aller rouler sur des clous.</p>
<p>Il existe des langages qui ont la judicieuse idée de balayer la route pour virer les clous avant d'y aller : les langages typés fortement et statiquement (10 points pour Gryffondor pour cette métaphore filée).</p>
<p>OCaml est un de ces langages. Il est de la famille ML et a été créé en France dans les années 90. Il est à peu près aussi âgé que JavaScript mais est beaucoup plus sage. Il est certes fortement et statiquement typé, mais il infère la plupart des types du programme (ce qui veut dire que vous n'avez pas à renseigner les types partout, il va l'extrapoler dès qu'il le peut). En bonus, il possède de <a href="https://ocaml.org/learn/tutorials/comparison_of_standard_containers.html">bonnes data-structures</a>.</p>
<p>Seulement voilà, OCaml, comme beaucoup de langages fonctionnels n'a pas vraiment mis l'accent sur l'accessibilité pour les débutants, et a une syntaxe qu'on peut pour le moins qualifier de pas très friendly: elle n'a rien de bien mal, mais mettez quelqu'un qui vient de JS/PHP/Java devant, ça va pas lui causer des masses:</p>
<pre><code class="hljs language-ocaml"><span class="hljs-keyword">let</span> <span class="hljs-keyword">rec</span> qsort = <span class="hljs-keyword">fun</span> <span class="hljs-keyword">value</span> ->
  <span class="hljs-keyword">match</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">with</span>
   | <span class="hljs-literal">[]</span> -> <span class="hljs-literal">[]</span>
   | pivot :: rest ->
       <span class="hljs-keyword">let</span> is_less x = x &#x3C; pivot <span class="hljs-keyword">in</span>
       <span class="hljs-keyword">let</span> left, right = <span class="hljs-type">List</span>.partition is_less rest <span class="hljs-keyword">in</span>
       qsort left @ [pivot] @ qsort right;;</code></pre>
<figure>
<img src="./giphy.gif" alt="" />
<figcaption>fig. 1: dev JS devant du code OCaml</figcaption>
</figure>
<p>C'est là qu'intervient Reason, un projet initié par <a href="https://twitter.com/jordwalke">le créateur de React</a>. Les premières itérations de React étaient d'ailleurs codées dans un langage cousin de OCaml, le SML.</p>
<p>C'est en gros:</p>
<ul>
<li>OCaml</li>
<li>avec une syntaxe <em>beginner-friendly</em></li>
<li>avec un tooling le rendant plus simple à utiliser</li>
<li>qui peut compiler vers JavaScript et de multiples plateformes</li>
</ul>
<p>Avec son type system, OCaml propose un langage <em>safe-by-design</em>, chose que même avec une palanquée d'outils, on ne peut pas atteindre avec JavaScript.</p>
<p>Le langage propose par défaut une approche fonctionnelle et immutable, mais permet cependant de choisir d'utiliser des structures mutables et de l'orienté objet au besoin.</p>
<h2 id="le-langage"><a href="#le-langage" class="phenomic-HeadingAnchor">#</a>Le langage</h2>
<p>Reason comporte plus de types de primitifs que JavaScript:</p>
<pre><code class="hljs language-reason"><span class="hljs-comment">/* pas un gros "number" fourre tout, magique */</span>
<span class="hljs-number">1</span> <span class="hljs-comment">/* int */</span>
<span class="hljs-number">1.0</span> <span class="hljs-comment">/* float */</span>
<span class="hljs-comment">/* un caractère est d'un type différent de string */</span>
<span class="hljs-string">"foo"</span> <span class="hljs-comment">/* string */</span>
'a' <span class="hljs-comment">/* char */</span>
<span class="hljs-comment">/* on trouve list ET array, chacun peut être utilisé pour différents cas */</span>
[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] <span class="hljs-comment">/* list */</span>
[| <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> |] <span class="hljs-comment">/* array */</span>
<span class="hljs-comment">/* pas de null, mais des valeurs de type `option` qui contiennent
  soit une valeur, soit rien */</span>
Some <span class="hljs-number">1</span> <span class="hljs-comment">/* option int */</span>
None <span class="hljs-comment">/* option int */</span></code></pre>
<p>Puisqu'il est fortement typé, il est impossible de mixer les types comme en JavaScript, vous devrez obligatoirement les convertir:</p>
<pre><code class="hljs language-reason"><span class="hljs-number">1</span> + <span class="hljs-number">1.0</span>;
<span class="hljs-comment">/* Error:
  This expression has type int but an expression was expected of type float */</span>
<span class="hljs-number">1</span> + int_of_float <span class="hljs-number">1.0</span>;
<span class="hljs-comment">/* - : int = 2 */</span></code></pre>
<p>La plupart des opérations de transformations de type primitifs vers un autre sont accessibles dans le module <code>Pervasives</code> qui contient plein de petits utilitaires bien pratiques. Toutes les fonctions de ce module sont accessibles directement dans n'importe quel de vos fichiers.</p>
<p>Les fonctions de Reason sont beaucoup plus puissantes qu'en JavaScript:</p>
<pre><code class="hljs language-reason">let <span class="hljs-keyword">add </span>a <span class="hljs-keyword">b </span>=> a + <span class="hljs-keyword">b;
</span><span class="hljs-comment">/* int => int => int */</span>
<span class="hljs-keyword">add </span><span class="hljs-number">1</span> <span class="hljs-number">2</span><span class="hljs-comment">;</span>
<span class="hljs-comment">/* 3 */</span>
<span class="hljs-keyword">add </span><span class="hljs-number">1</span> <span class="hljs-number">2</span>.<span class="hljs-number">0</span><span class="hljs-comment">;</span>
<span class="hljs-comment">/* This expression has type float but an expression was expected of type int */</span>

<span class="hljs-comment">/* Les fonctions sont "auto-curried", ce qui signifie qu'une fonction
   qui n'a pas reçu tous ses paramètres retourne une nouvelle fonction
  qui va recevoir les paramètres manquants */</span>
let <span class="hljs-keyword">addOne </span>= <span class="hljs-keyword">add </span><span class="hljs-number">1</span><span class="hljs-comment">;</span>
<span class="hljs-comment">/* int => int */</span>

<span class="hljs-comment">/* Les fonctions peuvent avoir des paramètres nommés, optionnels et avec des valeurs par défaut */</span>
let sayHi ::name ::punct=<span class="hljs-string">"!"</span> () => <span class="hljs-string">"Hello "</span> ^ name ^ punct<span class="hljs-comment">;</span>
<span class="hljs-comment">/* name::string => string */</span>
sayHi name::<span class="hljs-string">"you"</span> ()<span class="hljs-comment">;</span>
<span class="hljs-comment">/* "Hello you!" */</span>
<span class="hljs-comment">/* L'ordre des arguments nommés n'a pas d'importance*/</span>
sayHi punct::<span class="hljs-string">"?"</span> name::<span class="hljs-string">"you"</span>  ()<span class="hljs-comment">;</span>
<span class="hljs-comment">/* "Hello you?" */</span></code></pre>
<p>Pour définir l'équivalent d'un <em>plain-object</em> JavaScript en Reason, on utilise des records:</p>
<pre><code class="hljs language-reason">/* On doit typer les records */
<span class="hljs-keyword">type</span> <span class="hljs-keyword">user</span> <span class="hljs-title">= {
  username</span>: <span class="hljs-keyword">string</span>,
  age: int
};

/* Les records ont un nombre de clés fini, vous <span class="hljs-keyword">ne</span> pouvez pas en
  ommettre une ou en mettre une en trop */
let <span class="hljs-keyword">user</span> <span class="hljs-title">= { username</span>: <span class="hljs-string">"Bob"</span> };
/* Error: Some record fields are undefined: age */

let <span class="hljs-keyword">user</span> <span class="hljs-title">= { username</span>: <span class="hljs-string">"Bob"</span>, age: <span class="hljs-number">20</span> };

/* Les records sont immutables par défaut */
let olderUser = {...user, age: user.age + <span class="hljs-number">1</span> };</code></pre>
<p>Reason possède un système de module très puissant: par défaut, chaque fichier de votre codebase est un module, mais vous pouvez également déclarer des modules <em>dans</em> un module.</p>
<pre><code class="hljs language-reason"><span class="hljs-keyword">module</span> User = {
  type t = {
    id: string,
    username: string,
    email: option string
  };
  <span class="hljs-keyword">let</span> make ::id ::username ::email => {id, username, email};
  <span class="hljs-keyword">let</span> sayHi user => <span class="hljs-string">"Hello "</span> ^ user.username ^ <span class="hljs-string">"!"</span>;
};

<span class="hljs-comment">/* Pour utiliser un module, tapez son nom, tout simplement */</span>
User.make id::<span class="hljs-string">"0"</span> username::<span class="hljs-string">"bloodyowl"</span> email::None
  <span class="hljs-comment">/* (ah oui, le pipe existe déjà ici, pas besoin d'attendre ES2050)*/</span>
  |> User.sayHi
  |> print_endline;
<span class="hljs-comment">/* "Hello bloodyowl" */</span>

<span class="hljs-comment">/* On peut également rendre toutes les valeurs d'un module accessibles localement */</span>
User.(
  make id::<span class="hljs-string">"0"</span> username::<span class="hljs-string">"bloodyowl"</span> email::None
    |> sayHi
    |> print_endline
);

<span class="hljs-comment">/* Carrément les rendre accessibles globalement dans le module */</span>
open User;

make id::<span class="hljs-string">"0"</span> username::<span class="hljs-string">"bloodyowl"</span> email::None
  |> sayHi
  |> print_endline;

<span class="hljs-comment">/* Ou même étendre un module statiquement et proprement,
  ça vous parle ça, Prototype et MooTools ?! */</span>
<span class="hljs-keyword">module</span> UserThatCanSayBye = {
  include User;
  <span class="hljs-keyword">let</span> sayBye user => <span class="hljs-string">"Bye "</span> ^ user.username ^ <span class="hljs-string">"!"</span>;
};</code></pre>
<p>Il existe également des functors, qui sont des sortes de fonctions retournant des modules à partir d'autres modules, mais on ne l'abordera pas dans cet article.</p>
<p>Reason possède également des variants, il s'agit de types pouvant avoir différents cas. Prenons l'exemple d'un message de chat:</p>
<pre><code class="hljs language-reason">type <span class="hljs-built_in">image</span> = {url: <span class="hljs-keyword">string</span>, <span class="hljs-built_in">width</span>: <span class="hljs-keyword">int</span>, <span class="hljs-built_in">height</span>: <span class="hljs-keyword">int</span>};

<span class="hljs-comment">/* chaque cas du variant peut prendre des paramètres */</span>
type message =
  | <span class="hljs-keyword">String</span> <span class="hljs-keyword">string</span> <span class="hljs-comment">/* soit une chaîne de caractères */</span>
  | Image <span class="hljs-built_in">image</span> <span class="hljs-comment">/* soit une image */</span>
  | Emoji <span class="hljs-keyword">string</span>; <span class="hljs-comment">/* soit un gros emoji */</span>

let stringMessage = <span class="hljs-keyword">String</span> <span class="hljs-string">"Hello"</span>; <span class="hljs-comment">/* On crée la valeur avec son constructeur */</span>
let imageMessage = Image {url: <span class="hljs-string">"https://fakeimg.pl/300x300"</span>, <span class="hljs-built_in">width</span>: <span class="hljs-number">300</span>, <span class="hljs-built_in">height</span>: <span class="hljs-number">300</span>};
let emojiMessage = Emoji {js|🐫|js}; <span class="hljs-comment">/* Quand la string contient de caractères unicode,
  on doit utiliser {js|votre string|js} */</span></code></pre>
<p>Ici, notre type <code>message</code> est bien délimité, et ses valeurs ne peuvent être que celles que l'on a défini.</p>
<p>Pour utiliser les valeurs d'un variant, on peut les extraire à l'aide de <code>switch</code>, qui va <em>pattern-matcher</em> pour nous permettre d'identifier et d'extraire les valeurs.</p>
<pre><code class="hljs language-reason">/* <span class="hljs-type">Petit</span> bonus, l'exemple utilise <span class="hljs-type">ReasonReact</span>, mais on détaillera ça dans un prochain article */
<span class="hljs-keyword">let</span> component = <span class="hljs-type">ReasonReact</span>.statelessComponent <span class="hljs-string">"ChatMessage"</span>;

<span class="hljs-keyword">let</span> make ::message _children => {
  ...component,
  render: <span class="hljs-keyword">fun</span> _ => {
    &#x3C;div>
      (switch message {
        | <span class="hljs-type">String</span> <span class="hljs-keyword">value</span> => <span class="hljs-type">ReasonReact</span>.stringToElement <span class="hljs-keyword">value</span>
        | <span class="hljs-type">Image</span> {url: src, width, height} => &#x3C;img width height src />
        /* <span class="hljs-type">Si</span> par mégarde j'oublie un cas possible dans un switch, je vais avoir un joli warning du
          compiler qui me dira:
            <span class="hljs-type">This</span> pattern-matching is not exhaustive.
            <span class="hljs-type">Here</span> is an example <span class="hljs-keyword">of</span> a <span class="hljs-keyword">value</span> that is not matched:
              <span class="hljs-type">Emoji</span>
        */
        | <span class="hljs-type">Emoji</span> <span class="hljs-keyword">value</span> =>
          &#x3C;div style=(<span class="hljs-type">ReactDOMRe</span>.<span class="hljs-type">Style</span>.make fontSize::<span class="hljs-string">"40px"</span> <span class="hljs-literal">()</span>)>
            (<span class="hljs-type">ReasonReact</span>.stringToElement <span class="hljs-keyword">value</span>)
          &#x3C;/div>
      })
    &#x3C;/div>
  }
};</code></pre>
<p>En Reason, les <em>let bindings</em> ont automatiquement le block parent comme scope, on peut du coup écrire des choses comme ceci :</p>
<pre><code class="hljs language-reason"><span class="hljs-keyword">let</span> <span class="hljs-attr">value</span> = {
  <span class="hljs-keyword">let</span> <span class="hljs-attr">a</span> = <span class="hljs-number">1</span>;
  <span class="hljs-keyword">let</span> <span class="hljs-attr">b</span> = <span class="hljs-number">2</span>;
  a + b; <span class="hljs-comment">/* la dernière expression est toujours retournée par défaut */</span>
};
<span class="hljs-comment">/* let value : int = 3 */</span>
a
<span class="hljs-comment">/* Error: Unbound value a */</span>                                                 </code></pre>
<p>Voilà pour l'introduction à ReasonML, pour en découvrir un peu plus je vous invite à aller lire la <a href="https://reasonml.github.io/">documentation officielle</a>. On verra dans les prochains articles comment fonctionne <a href="https://reasonml.github.io/reason-react">ReasonReact</a> (les bindings Reason vers React, avec quelques petites features sympathiques en plus), et comment l'adopter incrémentalement dans sa codebase pour avoir du code plus sûr, et <em>(spoilers)</em>, plus rapide que si vous l'écriviez à la main.</p>
<p>Bisous bisous.</p>
]]></description><link>http://putaindecode.io/fr/articles/reason/introduction-reason/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/reason/introduction-reason/</guid><pubDate>Mon, 02 Oct 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Podcast 6: L'air chaud]]></title><description><![CDATA[<p>Un épisode en petit comité:</p>
<ul>
<li>Zoontek (<a href="https://twitter.com/Zoontek">https://twitter.com/Zoontek</a>)</li>
<li>Matthias (<a href="https://twitter.com/bloodyowl">https://twitter.com/bloodyowl</a>)</li>
</ul>
<p>On vous parle de ReasonML, une nouvelle syntaxe et tooling pour rendre OCaml plus accessible, et on s'attarde un peu sur ce dernier, ainsi que sur l'écosystème permettant à Reason d'être utilisé avec JavaScript.</p>
<p>On vous présente également de manière détaillée ReactNative, le framework qui permet de créer des applications natives avec React en JavaScript.</p>
<p>Les quelques liens (si peu):</p>
<ul>
<li>Reason <a href="https://facebook.github.io/reason/">https://facebook.github.io/reason/</a></li>
<li>OCaml <a href="https://ocaml.org">https://ocaml.org</a></li>
<li>Les containers OCaml <a href="https://ocaml.org/learn/tutorials/comparison_of_standard_containers.html">https://ocaml.org/learn/tutorials/comparison_of_standard_containers.html</a></li>
<li>js_of_ocaml <a href="http://ocsigen.org/js_of_ocaml/">http://ocsigen.org/js_of_ocaml/</a></li>
<li>BuckleScript <a href="http://bucklescript.github.io/bucklescript/Manual.html">http://bucklescript.github.io/bucklescript/Manual.html</a></li>
<li>BuckleScript Reason (online demo) <a href="http://bucklescript.github.io/bucklescript/reason-demo/">http://bucklescript.github.io/bucklescript/reason-demo/</a></li>
<li>BuckleScript benchmark <a href="https://github.com/neonsquare/bucklescript-benchmark">https://github.com/neonsquare/bucklescript-benchmark</a></li>
<li>ReasonReact <a href="https://reasonml.github.io/reason-react/">https://reasonml.github.io/reason-react/</a></li>
<li>ReReactPrimitives (petit travail perso qui peut aider à aborder la syntaxe) <a href="https://github.com/bloodyowl/reReactPrimitives">https://github.com/bloodyowl/reReactPrimitives</a></li>
<li>BuckleScript TEA <a href="https://github.com/OvermindDL1/bucklescript-tea">https://github.com/OvermindDL1/bucklescript-tea</a></li>
<li>Discord ReasonML <a href="https://discord.gg/reasonml">https://discord.gg/reasonml</a></li>
<li>ReactNative <a href="https://facebook.github.io/react-native/">https://facebook.github.io/react-native/</a></li>
<li>ReactNative Changelog <a href="https://github.com/facebook/react-native/releases">https://github.com/facebook/react-native/releases</a></li>
<li>MetroBundler <a href="https://github.com/facebook/metro-bundler">https://github.com/facebook/metro-bundler</a></li>
<li>Create React Native App <a href="https://facebook.github.io/react-native/blog/2017/03/13/introducing-create-react-native-app.html">https://facebook.github.io/react-native/blog/2017/03/13/introducing-create-react-native-app.html</a></li>
<li>Expo <a href="https://expo.io">https://expo.io</a></li>
<li>Qui utilise ReactNative ? <a href="https://facebook.github.io/react-native/showcase.html">https://facebook.github.io/react-native/showcase.html</a></li>
<li>Animated <a href="https://github.com/animatedjs/animated">https://github.com/animatedjs/animated</a></li>
<li>ReactNativeWeb <a href="https://github.com/necolas/react-native-web/">https://github.com/necolas/react-native-web/</a></li>
<li>ReactPrimitives <a href="https://github.com/lelandrichardson/react-primitives">https://github.com/lelandrichardson/react-primitives</a></li>
<li>NativeModules <a href="https://facebook.github.io/react-native/docs/native-modules-ios.html">https://facebook.github.io/react-native/docs/native-modules-ios.html</a></li>
<li>React Navigation <a href="https://github.com/react-community/react-navigation">https://github.com/react-community/react-navigation</a></li>
<li>React Native Maps airbnb/react-native-maps</li>
<li>Lottie React Native <a href="https://github.com/airbnb/lottie-react-native">https://github.com/airbnb/lottie-react-native</a></li>
<li>React Native Vector Icons <a href="https://github.com/oblador/react-native-vector-icons">https://github.com/oblador/react-native-vector-icons</a></li>
<li>React Native Animatable <a href="https://github.com/oblador/react-native-animatable">https://github.com/oblador/react-native-animatable</a></li>
<li>BuckleScript React Native <a href="https://github.com/BuckleTypes/bs-react-native">https://github.com/BuckleTypes/bs-react-native</a></li>
</ul>
<p>La track du générique:</p>
<p><a href="https://soundcloud.com/matthias-le-brun/moon">https://soundcloud.com/matthias-le-brun/moon</a></p>
<iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/329979777&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
<ul>
<li>Le <a href="http://feeds.soundcloud.com/users/soundcloud:users:273901232/sounds.rss">RSS</a></li>
<li>Sur iTunes : <a href="https://itunes.apple.com/fr/podcast/putain-de-code-!/id1185311825?l=en&#x26;mt=2">Putain de Code</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/podcast/6/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/podcast/6/</guid><pubDate>Tue, 27 Jun 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Podcast 5: On va tous crever !]]></title><description><![CDATA[<p>Très certainement notre pire épisode, en tout cas le plus pénible à monter.</p>
<p>Sont présents mentalement dans la pièce dans laquelle s'est déroulé l'enregistrement :</p>
<ul>
<li>Georges (<a href="https://twitter.com/skinnyfoetusboy">https://twitter.com/skinnyfoetusboy</a>)</li>
<li>Mathieu (<a href="https://twitter.com/Zoontek">https://twitter.com/Zoontek</a>)</li>
<li>Matthias (<a href="https://twitter.com/bloodyowl">https://twitter.com/bloodyowl</a>)</li>
</ul>
<p>Est présent physiquement:</p>
<ul>
<li>Maxime Thirouin ouin ouin (<a href="https://twitter.com/MoOx">https://twitter.com/MoOx</a>)</li>
</ul>
<p>On vous parle du concept d'immutabilité, du nouvel outil Prettier ainsi que du langage Go que Mathieu nous présente.</p>
<p>Liens:
-Prettier: <a href="https://github.com/prettier/prettier">https://github.com/prettier/prettier</a>
-LearnXInYMinutes: <a href="https://learnxinyminutes.com">https://learnxinyminutes.com</a></p>
<p>Erratum par avance:</p>
<ul>
<li>Go en JS, ça existe: <a href="https://github.com/gopherjs/gopherjs">https://github.com/gopherjs/gopherjs</a></li>
<li>Go a vraiment une tabulation à la con: <a href="https://golang.org/cmd/gofmt/">https://golang.org/cmd/gofmt/</a></li>
</ul>
<iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/320551397&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
<ul>
<li>Le <a href="http://feeds.soundcloud.com/users/soundcloud:users:273901232/sounds.rss">RSS</a></li>
<li>Sur iTunes : <a href="https://itunes.apple.com/fr/podcast/putain-de-code-!/id1185311825?l=en&#x26;mt=2">Putain de Code</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/podcast/5/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/podcast/5/</guid><pubDate>Wed, 03 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Podcast 4: Ça scale pas quand on sait en faire (feat. iAmNotCyril)]]></title><description><![CDATA[<p>On se retrouve avec un épisode un poil plus long et arrosé, avec Mathieu (<a href="https://twitter.com/Zoontek">https://twitter.com/Zoontek</a>), Georges (<a href="https://twitter.com/skinnyfoetusboy">https://twitter.com/skinnyfoetusboy</a>), Maxime (<a href="https://twitter.com/MoOx">https://twitter.com/MoOx</a>), Matthias (<a href="https://twitter.com/bloodyowl">https://twitter.com/bloodyowl</a>) et le premier invité de l'émission : Cyril (<a href="https://twitter.com/IAmNotCyril">https://twitter.com/IAmNotCyril</a>), développeur front-end chez Netcats (<a href="https://twitter.com/gonetcats">https://twitter.com/gonetcats</a>).</p>
<p>Est-ce que le métier d'intégrateur va disparaître ? On débat des métiers gravitant autour du front-end web, de ce que c'était hier, de ce que c'est aujourd'hui, de comment on pense que ce sera demain, le tout avec une bonne dose de mauvaise foi™.</p>
<p>On parle aussi d'éditeurs de code de façon presque intelligible: Sublime Text vs Atom vs VSCo… le mieux c'est de laisser Mathieu parler de ce dernier.</p>
<p>Les liens:</p>
<ul>
<li>Sublime Text: <a href="https://web.archive.org/web/20080701071916/http://www.sublimetext.com/">https://web.archive.org/web/20080701071916/http://www.sublimetext.com/</a></li>
<li>Atom: <a href="https://atom.io">https://atom.io</a></li>
<li>VSCode: <a href="https://code.visualstudio.com">https://code.visualstudio.com</a></li>
</ul>
<iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/313086300%3Fsecret_token%3Ds-uDXSJ&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
<ul>
<li>Le <a href="http://feeds.soundcloud.com/users/soundcloud:users:273901232/sounds.rss">RSS</a></li>
<li>Sur iTunes : <a href="https://itunes.apple.com/fr/podcast/putain-de-code-!/id1185311825?l=en&#x26;mt=2">Putain de Code</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/podcast/4/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/podcast/4/</guid><pubDate>Tue, 21 Mar 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Formatez votre JavaScript avec prettier]]></title><description><![CDATA[<p>Rob Pike et Ken Thompson ont conçu le langage de programmation Go de façon à ce que celui-ci soit à portée des jeunes développeurs : si vous découvrez et commencez à apprendre le Go le lundi, vous devriez être en mesure d'être productif le mercredi. Le langage est extrêmement minimaliste, il y a rarement plus d'une façon de faire quelque chose.</p>
<p>Seulement voilà, le développeur torturé se posera toujours un tas de questions essentielles : tabs ou spaces ? 2, 4 ou 8 spaces ? Single quotes ou double quotes ? Après quelles structures de contrôle passer une ligne ? Mais aussi les éternels : vim ou emacs ? Flow ou TypeScript ? Maintenir ce projet Angular 1 ou démissionner comme un prince ?</p>
<p><em>N.B. : Pour information, les bonnes réponses sont bien évidemment spaces, 2, single quotes, vim, flow, la démission</em></p>
<p>C'est pour répondre à ce problème (enfin, ceux liés au formatage de votre code) que Go intègre un formatting tool (<code>fmt</code>, comme la commande Unix), intitulé <a href="https://golang.org/cmd/gofmt/">gofmt</a>. </p>
<ol>
<li>Vous codez comme vous le sentez  </li>
<li>Vous sauvegardez votre fichier  </li>
<li>Votre code est automatiquement formaté  </li>
<li>Vous vous sentez frustré  </li>
<li>Très vite, vous vous rendez compte que c'est pour votre bien, et que perdre du temps ou débattre sur ce genre de détails, c'est tout sauf utile</li>
</ol>
<p>Autre avantage non négligeable : le code Go que vous trouverez dans d'autres packages, des exemples, etc. sera toujours formaté de la même façon.</p>
<p><em>À noter : Reason offre quelque chose de similaire avec <a href="https://facebook.github.io/reason/tools.html">refmt</a>.</em></p>
<p>Cette solution officielle n'existe pas en JS. Mais c'est ici qu'intervient <a href="https://github.com/prettier/prettier">prettier</a> (et non <a href="https://www.npmjs.com/package/jsfmt">jsfmt</a>, qui existe mais ne semble plus maintenu), un projet relativement récent, en version <code>0.21</code> à l'heure où j'écris ces lignes. Compatible <em>out of the box</em> avec le JS ES2017, JSX, flow, il offre également le moins de configuration possible (ce qui est une bonne chose). Le projet est activement suivi par Facebook, qui discute même la possibilité de s'en servir sur la codebase de <a href="https://github.com/facebook/react/pull/9101">React</a>.</p>
<h2 id="comment-ça-fonctionne-"><a href="#comment-%C3%A7a-fonctionne-" class="phenomic-HeadingAnchor">#</a>Comment ça fonctionne ?</h2>
<p>Croyez-le ou non, ce n'est pas "tellement" complexe. À la manière de babel ou flow, prettier utilise un AST parser (Abstract Syntax Tree parser) afin d'analyser le contenu de votre fichier JS, suite à quoi il va simplement formater votre code sans tenir compte de la forme précédente, en ne gardant que ce qui est important: le fond, pas la forme.</p>
<p>Je vous invite à jouer avec <a href="https://astexplorer.net/">AST explorer</a> pour comprendre beaucoup plus simplement comment tout cela fonctionne.</p>
<h2 id="installation"><a href="#installation" class="phenomic-HeadingAnchor">#</a>Installation</h2>
<pre><code class="hljs language-console">npm install --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span> prettier</code></pre>
<p>Ou, pour les meilleurs d'entre vous :</p>
<pre><code class="hljs language-console">yarn <span class="hljs-keyword">add</span><span class="bash"> --dev prettier</span></code></pre>
<p>¯\<em>(ツ)</em>/¯</p>
<h2 id="configuration"><a href="#configuration" class="phenomic-HeadingAnchor">#</a>Configuration</h2>
<p>Car oui, il y en a tout de même un peu. Il est possible de régler:</p>
<ul>
<li>La longueur maximale des lignes (<code>printWidth</code>, <code>80</code> caractères par défaut)</li>
<li>Le nombre d'espaces pour l'indentation (<code>tabWidth</code>, <code>2</code> par défaut, pas de tabs)</li>
<li>Single quotes / double quotes (<code>singleQuote</code>, <code>false</code> par défaut)</li>
<li>S'il faut ajouter des virgules en fin de certaines structures (comme les objets, mais aussi dans les paramètres de fonction, ce qui est possible depuis peu) (<code>trailingComma</code>, <code>none</code> par défaut, <code>es5</code> et <code>all</code> sont également possibles)</li>
<li>S'il faut ajouter des espaces dans un objet écrit sur une seule ligne (<code>bracketSpacing</code>, <code>true</code> par défaut)</li>
<li>Comment fermer les balises JSX (<code>jsxBracketSameLine</code>, <code>false</code> par défaut)</li>
<li>Quel parser utiliser (<code>parser</code>, <code>babylon</code> par défaut, <code>flow</code> est disponible)</li>
</ul>
<blockquote>
<p>Mais attends… Si l'on peut malgré tout configurer tout ça, ce n'est plus vraiment un style standard ?</p>
</blockquote>
<p>Oui et non, car il y aura toujours beaucoup de détails sur lesquels il nous sera impossible de choisir, les options resteront minimalistes. Par exemple, vous ne pourrez jamais retirer les points-virgules.</p>
<p><code>EDIT: Il semblerait que malgré ce qui a pu être annoncé par l'auteur de prettier, une option --no-semicolons soit dans les tuyaux.</code></p>
<p>Dans tous les cas, prettier reste un outil extrêmement pratique pour forcer le formatage du code au sein de votre équipe.</p>
<p>Ouvrez votre <code>package.json</code>, c'est parti.</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">"scripts"</span>: {
    <span class="hljs-attr">"prettify"</span>: <span class="hljs-string">"prettier src/**/*.js"</span>
  },
  <span class="hljs-attr">"devDependencies"</span>: {
    <span class="hljs-attr">"prettier"</span>: <span class="hljs-string">"^0.21.0"</span>
  }
}</code></pre>
<p><code>npm run prettify</code> ou <code>yarn run prettify</code> formateront automatiquement tous les fichiers <code>.js</code> contenus dans votre dossier <code>/src</code>.
Bon j'avoue, c'est assez basique comme usage. Ajoutons-y notre config préférée.</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">"scripts"</span>: {
    <span class="hljs-attr">"prettify"</span>: <span class="hljs-string">"prettier --single-quote --trailing-comma all --write '{src,__{tests,mocks}__}/**/*.js'"</span>
  },
  <span class="hljs-attr">"devDependencies"</span>: {
    <span class="hljs-attr">"prettier"</span>: <span class="hljs-string">"^0.21.0"</span>
  }
}</code></pre>
<p><code>npm run prettify</code> ou <code>yarn run prettify</code> formateront maintenant automatiquement tous les fichiers <code>.js</code> contenus dans vos dossiers <code>/src</code>, <code>__tests__</code> et <code>__mocks__</code>, en utilisant le parser de flow, préférant les single quotes et en ajoutant une virgule en fin de chaque structure possible.</p>
<p>OK. Mais si un membre de l'équipe oublie d'exécuter le script avant de commiter son code ?
<strong>We got this !</strong> (avec 2 dépendances de plus).</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">"scripts"</span>: {
    <span class="hljs-attr">"precommit"</span>: <span class="hljs-string">"lint-staged"</span>,
    <span class="hljs-attr">"prettify"</span>: <span class="hljs-string">"prettier --single-quote --trailing-comma all --write '{src,__{tests,mocks}__}/**/*.js'"</span>
  },
  <span class="hljs-attr">"lint-staged"</span>: {
    <span class="hljs-attr">"{src,__{tests,mocks}__}/**/*.js"</span>: [
      <span class="hljs-string">"prettier --single-quote --trailing-comma all --write"</span>,
      <span class="hljs-string">"git add"</span>
    ]
  },
  <span class="hljs-attr">"devDependencies"</span>: {
    <span class="hljs-attr">"husky"</span>: <span class="hljs-string">"^0.13.2"</span>,
    <span class="hljs-attr">"lint-staged"</span>: <span class="hljs-string">"^3.3.1"</span>,
    <span class="hljs-attr">"prettier"</span>: <span class="hljs-string">"^0.21.0"</span>
  }
}</code></pre>
<h2 id="les-plugins"><a href="#les-plugins" class="phenomic-HeadingAnchor">#</a>Les plugins</h2>
<p>Si vous ne pouvez pas attendre le moment du commit pour admirer votre code fraichement formaté, il existe déjà pas mal de plugins, pour pas mal d'éditeurs : <code>prettier-atom</code>, <code>prettier-vscode</code>, <code>Jsprettier</code> (pour Sublime Text), mais aussi pour emacs, vim, les IDE Jetbrain, etc. Tout est dans le <a href="https://github.com/prettier/prettier/blob/master/README.md">README</a>.</p>
<p><em>Protip: Inutile de vous conforter au style de formatage de votre équipe au sein de votre éditeur si le code est à nouveau formaté en pre-commit.</em></p>
<h2 id="quelques-exemples-cest-possible-"><a href="#quelques-exemples-cest-possible-" class="phenomic-HeadingAnchor">#</a>Quelques exemples, c'est possible ?</h2>
<p>J'ai mieux. Il est possible d'<a href="https://prettier.github.io/prettier">essayer en ligne</a> ! ✨</p>
<h2 id="donc-cest-bon-tu-conseilles-"><a href="#donc-cest-bon-tu-conseilles-" class="phenomic-HeadingAnchor">#</a>Donc c'est bon, tu conseilles ?</h2>
<p>C'est tout de même à réfléchir. Le projet est encore jeune et en beta, même s'il évolue extrêmement vite. Tout n'est pas encore parfaitement supporté, mais je vous rassure, si vous n'utilisez pas le flow-parser vous ne risquez pas de rencontrer beaucoup de problèmes avec la dernière version.</p>
<p>Des projets tels que <a href="https://github.com/facebook/immutable-js/commit/9bcc8b54a17c3bbc94d70864121784bc91011e8f">immutable-js</a>, <a href="https://github.com/necolas/react-native-web/commit/a2f25a46c495ca53a75e728cfb14dbdf67cdb342">react-native-web</a> et <a href="https://github.com/babel/babel/commit/bdbe2cfbc5ab5ba6f528b7ee3e4bf5ed940a47af">babel</a> y sont déjà passés. Pourquoi pas vous ? 😉</p>
]]></description><link>http://putaindecode.io/fr/articles/js/prettier/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/prettier/</guid><pubDate>Wed, 08 Mar 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Podcast épisode 3]]></title><description><![CDATA[<h2 id="orga-nisé"><a href="#orga-nis%C3%A9" class="phenomic-HeadingAnchor">#</a><em>Orga-nisé</em></h2>
<p>Pour ce 3ème épisode, on a miraculeusement <em>réussi</em> à faire plus court.</p>
<p>Y participent :</p>
<ul>
<li>Maxime alias <a href="https://twitter.com/MoOx">MoOx</a></li>
<li>Mathieu alias <a href="https://twitter.com/Zoontek">Zoontek</a></li>
<li>Matthias alias <a href="https://twitter.com/bloodyowl">bloodyowl</a></li>
</ul>
<p>et on vous y parle de :</p>
<ul>
<li>typing</li>
<li>OO vs FP (premier épisode d'une série, stay tuned)</li>
<li>monorepos</li>
</ul>
<p>On espère que ça vous plaira !</p>
<p>Bisous.</p>
<iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/307914736&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
<ul>
<li>Le <a href="http://feeds.soundcloud.com/users/soundcloud:users:273901232/sounds.rss">RSS</a></li>
<li>Sur iTunes : <a href="https://itunes.apple.com/fr/podcast/putain-de-code-!/id1185311825?l=en&#x26;mt=2">Putain de Code</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/podcast/3/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/podcast/3/</guid><pubDate>Thu, 16 Feb 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction à styled-components]]></title><description><![CDATA[<p>Il existe de nombreuses approches et <a href="https://github.com/MicheleBertoli/css-in-js">solutions différentes</a> pour gérer le CSS en ReactJS, je vais parler ici de <a href="https://github.com/styled-components/styled-components">styled-components</a> qui permet de gagner en productivité et en qualité quand on veut créer et distribuer des composants UI.</p>
<p>La force de <a href="https://github.com/styled-components/styled-components">styled-components</a> c'est de faciliter la création de composants visuels ReactJS minimalistes et configurables, en combinant du <strong>CSS standard</strong> et <strong>un zeste de JavaScript</strong>. Ces composants deviendront littéralement les pièces de lego qui pourront être utilisées et partagées entre les UIs de toutes vos applications, sites webs...</p>
<p>Si vous voulez jouer avec, je vous conseille d'utiliser <a href="https://github.com/facebookincubator/create-react-app">create-react-app</a> pour générer un projet vierge puis d'ajouter styled-components au projet : <code>npm i --save styled-components</code>.</p>
<p>Avec styled, on peut abstraire le CSS et le DOM de la vue, ce qui va grandement simplifier le code de la partie "métier" de l'application, et améliorer la lisibilité.</p>
<h5 id="avant-"><a href="#avant-" class="phenomic-HeadingAnchor">#</a>Avant :</h5>
<pre><code class="hljs language-jsx"><span class="hljs-comment">// solution en pure CSS-in-JS</span>

<span class="hljs-keyword">const</span> styles = {
  <span class="hljs-attr">box</span>: {
    <span class="hljs-attr">width</span>: <span class="hljs-string">'60%'</span>,
    <span class="hljs-attr">border</span>: <span class="hljs-string">'1px solid silver'</span>
  },
  <span class="hljs-attr">title</span>: {
    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">'1.2em'</span>,
    <span class="hljs-attr">fontWeight</span>: <span class="hljs-string">'bold'</span>
  },
  <span class="hljs-attr">description</span>: {
    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">'0.8em'</span>
  },
  <span class="hljs-attr">important</span>: {
    <span class="hljs-attr">fontWeight</span>: <span class="hljs-string">'bold'</span>
  }
}

<span class="hljs-comment">// nos composants intègrent les styles dans le code</span>
&#x3C;div className={ styles.box }>
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{</span> <span class="hljs-attr">styles.title</span> }></span>{ title }<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
  &#x3C;div className={ classnames(styles.description, styles.important) }>{ description }&#x3C;<span class="hljs-regexp">/div>
&#x3C;/</span>div></code></pre>
<h5 id="après-"><a href="#apr%C3%A8s-" class="phenomic-HeadingAnchor">#</a>Après :</h5>
<pre><code class="hljs language-jsx"><span class="hljs-comment">// avec styled-components</span>

<span class="hljs-keyword">const</span> Box = styled.div<span class="hljs-string">`
  width: 60%;
  border: 1px solid silver;
`</span>

<span class="hljs-keyword">const</span> Title = styled.div<span class="hljs-string">`
  font-size: 1.2em;
  font-weight: bold;
`</span>

<span class="hljs-keyword">const</span> Description = styled.div<span class="hljs-string">`
  font-size: 0.8em;
  font-weight: <span class="hljs-subst">${ props => props.important ? <span class="hljs-string">'bold'</span> : <span class="hljs-string">'normal '</span>}</span>
`</span>

<span class="hljs-comment">// les composants sont pré-stylés, pas de bruit généré par le styling</span>
&#x3C;Box>
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">Title</span>></span>{ title }<span class="hljs-tag">&#x3C;/<span class="hljs-name">Title</span>></span></span>
  &#x3C;Description important>{ description }&#x3C;<span class="hljs-regexp">/Description>
&#x3C;/</span>Box></code></pre>
<h3 id="avantages-"><a href="#avantages-" class="phenomic-HeadingAnchor">#</a>Avantages :</h3>
<ul>
<li><a href="https://github.com/styled-components/styled-components/graphs/contributors">community powered</a> - moving fast, <a href="https://github.com/styled-components/styled-components/tree/v2">v2 en cours</a></li>
<li>support des <a href="https://github.com/styled-components/styled-components/blob/master/docs/theming.md">thèmes</a></li>
<li><a href="https://github.com/styled-components/styled-components/blob/master/docs/css-we-support.md">syntaxe CSS "classique"</a> mais scopé automatiquement</li>
<li>Gestion des media queries, pseudo-selectors, nesting</li>
<li>Un <a href="https://github.com/rofrischmann/inline-style-prefixer/">autoprefixer-like intégré</a></li>
<li>Code "métier" plus lisible</li>
<li>Compatible react-native</li>
<li>Compatible avec les <a href="https://facebook.github.io/jest/">snapshots Jest</a> out of the box</li>
<li>Ne nécessite pas de loader Webpack spécifique ❤️</li>
</ul>
<h3 id="inconvénients-"><a href="#inconv%C3%A9nients-" class="phenomic-HeadingAnchor">#</a>Inconvénients :</h3>
<ul>
<li>pas encore idéal pour <a href="https://github.com/styled-components/styled-components/issues/134">des styles très dynamiques</a></li>
<li>pas encore idéal pour <a href="https://github.com/styled-components/styled-components/issues/124">le server-side</a></li>
<li>syntaxe pas forcement bien <a href="https://github.com/styled-components/styled-components#linting">surlignée ou lintée</a> mais <a href="https://github.com/styled-components/styled-components#syntax-highlighting">des plugins existent</a>.</li>
</ul>
<h3 id="fonctionnement"><a href="#fonctionnement" class="phenomic-HeadingAnchor">#</a>Fonctionnement</h3>
<p>Techniquement, <a href="https://github.com/styled-components/styled-components">styled-components</a> va pour chaque composant "styled" présent dans le DOM :</p>
<ul>
<li>injecter les classes CSS nécessaires pour ce composant dans le <code>&#x3C;head></code> de la page, au runtime.</li>
<li>fournir au composant une props <code>className</code> unique (ainsi que ses <code>ownProps</code>)</li>
</ul>
<p>La syntaxe est certes exotique, le CSS étant défini dans un template-string ES2015, mais ceci rend le code très concis.</p>
<p>Pour en savoir plus sur les "Template Strings", ou "Littéraux de gabarits" en Français 🇫🇷 vous pouvez lire <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Litt%C3%A9raux_gabarits">l'excellente doc chez MDN</a>.</p>
<h3 id="usage-"><a href="#usage-" class="phenomic-HeadingAnchor">#</a>Usage :</h3>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">'styled-components'</span>

<span class="hljs-comment">// exemple ici avec une div</span>
<span class="hljs-keyword">const</span> Title = styled.div<span class="hljs-string">`
  font-size: 3rem;
  color: #ff3333;
`</span>

<span class="hljs-comment">// utilisable comme ceci :</span>
&#x3C;Title>Hello, World&#x3C;<span class="hljs-regexp">/Title></span></code></pre>
<p>ceci qui génèrera automatiquement dans le DOM:</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dxhUOh"</span>></span>Hello, World<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></code></pre>
<p>et injectera dans le CSS de la page le style associé :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.dxhUOh</span> {
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">3rem</span>;
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff3333</span>;
}</code></pre>
<p><img src="./styled-1.png" width="200"/></p>
<h2 id="exemples"><a href="#exemples" class="phenomic-HeadingAnchor">#</a>Exemples</h2>
<h3 id="composition"><a href="#composition" class="phenomic-HeadingAnchor">#</a>Composition</h3>
<p>Les composants styled sont des composants ReactJS standards qui peuvent recevoir des <code>children</code> et se composer les uns avec les autres.</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Box = styled.div<span class="hljs-string">`
  border: 1px solid silver;
  width: 80%;
  padding: 1em;
  text-align: center;
  background: #e7f3ff;
`</span>

<span class="hljs-keyword">const</span> Title = styled.div<span class="hljs-string">`
  font-size: 1.5em;
  color: #0080ff;
`</span>

&#x3C;Box>
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">Title</span>></span>Hello, World<span class="hljs-tag">&#x3C;/<span class="hljs-name">Title</span>></span></span>
&#x3C;<span class="hljs-regexp">/Box></span></code></pre>
<p><img src="./styled-2.png" width="300"/></p>
<h3 id="etendre-des-composants-en-css"><a href="#etendre-des-composants-en-css" class="phenomic-HeadingAnchor">#</a>Etendre des composants en CSS</h3>
<p>Surcharger un composant avec du CSS :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Title = styled.div<span class="hljs-string">`
  font-size: 3rem;
  color: #ff3333;
`</span>
<span class="hljs-keyword">const</span> BlueTitle = styled(Title)<span class="hljs-string">`
  color: #0080ff;
`</span>
&#x3C;Title>titre en rouge&#x3C;<span class="hljs-regexp">/Title>
&#x3C;BlueTitle>titre en bleu&#x3C;/</span>BlueTitle></code></pre>
<p><img src="./styled-3.png" width="200"/></p>
<h3 id="pseudo-classes"><a href="#pseudo-classes" class="phenomic-HeadingAnchor">#</a>Pseudo classes</h3>
<p>Les pseudo-classes, le nesting sont acceptées</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Button = styled.button<span class="hljs-string">`
  font-size: 3rem;
  color: #ff3333;
  &#x26;:hover {
    color: #0080ff;
  }
`</span></code></pre>
<p><img src="./styled-hover.gif" width="100"/></p>
<h3 id="media-queries"><a href="#media-queries" class="phenomic-HeadingAnchor">#</a>Media queries</h3>
<p>Les medias queries sont possibles facilement :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Cover = styled.div<span class="hljs-string">`
  background-image: url(http://putaindecode.io/assets/npm.png);
  background-repeat: no-repeat;
  background-size: contain;
  background-position: center center;
  width: 800px;
  height:300px;

  @media (max-width: 800px) {
    width: 400px;
  }
`</span></code></pre>
<p>Usage avancé des media queries : <a href="https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md#media-templates">https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md#media-templates</a></p>
<h3 id="composants-configurables"><a href="#composants-configurables" class="phenomic-HeadingAnchor">#</a>Composants configurables</h3>
<p>Mieux : comme le composant à directement accès aux <code>props</code> (attributs du composant), on peut le configurer depuis le JavaScript :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Title = styled.div<span class="hljs-string">`
  font-size: 3rem;
  color: <span class="hljs-subst">${props => props.blue ? <span class="hljs-string">'#0080ff'</span> : <span class="hljs-string">'#ff3333'</span>}</span>;
`</span>
&#x3C;Title>titre en rouge&#x3C;<span class="hljs-regexp">/Title>
&#x3C;Title blue>titre en bleu&#x3C;/</span>Title></code></pre>
<p><img src="./styled-3.png" width="200"/></p>
<h3 id="dans-un-composant-react-classique"><a href="#dans-un-composant-react-classique" class="phenomic-HeadingAnchor">#</a>Dans un composant React "classique"</h3>
<p>Avec la methode <code>styled.css</code>, une <code>className</code> unique est générée et peut être utilisée pour vos composants :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> Notification <span class="hljs-keyword">from</span> <span class="hljs-string">'./Notification'</span>

<span class="hljs-keyword">const</span> warning = styled.css<span class="hljs-string">`
  color: #ff3333;
`</span>

<span class="hljs-keyword">const</span> WarningNotification = <span class="hljs-function"><span class="hljs-params">()</span> =></span> &#x3C;Notification className={ warning } /></code></pre>
<h3 id="réutiliser-des-styles"><a href="#r%C3%A9utiliser-des-styles" class="phenomic-HeadingAnchor">#</a>Réutiliser des styles</h3>
<p>Comme styled utilise des <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Litt%C3%A9raux_gabarits">templates literals</a> vous pouvez utiliser n'importe quelle variable dans votre CSS :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> textStyle = <span class="hljs-string">`
  font-size: 2em;
  letter-spacing: 5px;
`</span>
<span class="hljs-keyword">const</span> TextRed = styled.div<span class="hljs-string">`
  <span class="hljs-subst">${textStyle}</span>
  color: #ff3333;
`</span>
<span class="hljs-keyword">const</span> TextBlue = styled.div<span class="hljs-string">`
  <span class="hljs-subst">${textStyle}</span>
  color: #0080ff;
`</span>
&#x3C;TextRed>texte en rouge&#x3C;<span class="hljs-regexp">/TextRed>
&#x3C;TextBlue>texte en bleu&#x3C;/</span>TextBlue></code></pre>
<p><img src="./styled-4.png" width="200"/></p>
<h3 id="attributs-html"><a href="#attributs-html" class="phenomic-HeadingAnchor">#</a>Attributs HTML</h3>
<p>Par défaut les composants styled passent toutes leur <code>props</code> au DOM, par exemple ici, <code>placeholder</code>.</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> SuperInput = styled.input<span class="hljs-string">`
  border: 2px solid silver;
  border-radius: 2px;
  text-align: center;
  font-size: 1.5em;
`</span>

&#x3C;SuperInput placeholder=<span class="hljs-string">"Your name"</span>/></code></pre>
<p><img src="./styled-5.png" width="200"/></p>
<h3 id="utiliser-le-theming"><a href="#utiliser-le-theming" class="phenomic-HeadingAnchor">#</a>Utiliser le theming</h3>
<p>Pour rendre son UI themable, il suffit d'encapsuler son App dans un composant <code>ThemeProvider</code>; Chaque composant styled se verra alors fournir une props <code>theme</code> avec toutes les variables du thème :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Button = styled.button<span class="hljs-string">`
  background: <span class="hljs-subst">${props => props.theme.main || <span class="hljs-string">'silver'</span>}</span>;
`</span>

<span class="hljs-comment">// Create a green theme</span>
<span class="hljs-keyword">const</span> greenTheme = {
  <span class="hljs-attr">main</span>: <span class="hljs-string">'mediumseagreen'</span>,
}

<span class="hljs-comment">// Create a blue theme</span>
<span class="hljs-keyword">const</span> blueTheme = {
  <span class="hljs-attr">main</span>: <span class="hljs-string">'#0080ff'</span>,
}

&#x3C;ThemeProvider theme={greenTheme}>
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">Button</span>></span>I'm green!<span class="hljs-tag">&#x3C;/<span class="hljs-name">Button</span>></span></span>
&#x3C;<span class="hljs-regexp">/ThemeProvider></span></code></pre>
<p>Et pour aller loin, consultez la <a href="https://github.com/styled-components/styled-components/blob/master/docs/theming.md#using-theming">documentation officielle</a></p>
<h3 id="injecter-des-css-globaux"><a href="#injecter-des-css-globaux" class="phenomic-HeadingAnchor">#</a>Injecter des CSS globaux</h3>
<p>Parfois on a besoin d'intégrer aussi du CSS "global". Par exemple pour les fontes, ou lorsque l'on migre une grosse application.</p>
<p>Voici une façon de le faire avec styled :</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> { injectGlobal } <span class="hljs-keyword">from</span> <span class="hljs-string">'styled-components'</span>

injectGlobal<span class="hljs-string">`
  @import url('https://fonts.googleapis.com/css?family=Roboto');
  * {
    font-family: 'Roboto', sans-serif;
  }
`</span></code></pre>
<p>Plus d'infos sur <a href="https://github.com/styled-components/styled-components/blob/master/docs/api.md#injectglobal">la doc d'injectGlobal</a></p>
<h3 id="react-storybook"><a href="#react-storybook" class="phenomic-HeadingAnchor">#</a>React Storybook</h3>
<p>En ajoutant <a href="https://github.com/storybooks/react-storybook">react-storybook</a> dans votre projet, vous pourrez facilement vous constituter une bibliothèque visuelle avec vos propres composants, hors-contexte, dans tous leurs états possibles, et avec du Hot-Reload ce qui est <strong>très très pratique dans la phase de conception</strong>.</p>
<h3 id="autres-liens-"><a href="#autres-liens-" class="phenomic-HeadingAnchor">#</a>Autres liens :</h3>
<ul>
<li><a href="https://github.com/styled-components/styled-components/blob/master/docs">Documentation officielle</a></li>
<li><a href="https://www.smashingmagazine.com/2017/01/styled-components-enforcing-best-practices-component-based-systems/">Enforcing Best Practices In Component-Based Systems</a></li>
<li><a href="http://mxstbr.blog/2016/11/styled-components-magic-explained/">The magic behind 💅 styled-components</a></li>
<li><a href="https://github.com/MicheleBertoli/css-in-js">React CSS-in-JS techniques comparison</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/js/react/styled-components/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/react/styled-components/</guid><pubDate>Wed, 01 Feb 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Podcast épisode 2]]></title><description><![CDATA[<h2 id="le-lendemain-des-trois-jours"><a href="#le-lendemain-des-trois-jours" class="phenomic-HeadingAnchor">#</a><em>Le lendemain des trois jours</em></h2>
<p>Y participent :</p>
<ul>
<li>Mathieu alias <a href="https://twitter.com/Zoontek">Zoontek</a></li>
<li>Georges alias <a href="https://twitter.com/skinnyfoetusboy">skinnyfoetusboy</a></li>
<li>Matthias alias <a href="https://twitter.com/bloodyowl">bloodyowl</a></li>
</ul>
<p>et on vous y parle de :</p>
<ul>
<li>solutions pour l'UI qu'on passe en revue</li>
<li>unit testing JS</li>
<li>nouveaux MacBook 2016</li>
</ul>
<p>On espère que ça vous plaira !</p>
<p>Bisous.</p>
<iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/301667566&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
<ul>
<li>Le <a href="http://feeds.soundcloud.com/users/soundcloud:users:273901232/sounds.rss">RSS</a></li>
<li>Sur iTunes : <a href="https://itunes.apple.com/fr/podcast/putain-de-code-!/id1185311825?l=en&#x26;mt=2">Putain de Code</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/podcast/2/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/podcast/2/</guid><pubDate>Thu, 12 Jan 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Quelques petits h͔̞̞̭͙͠a̘ç̫̯͓k̵͖̘̬̳̱̯̤s̴͎̻̯ typographiques]]></title><description><![CDATA[<p>On ne va pas se mentir, la typo c'est quand même super important sur le web, et
il va falloir admettre que ce bon vieux Gutenberg avait eu un sacré flair à
l'époque.</p>
<p>Ah, qu'il est bon de parcourir un web parfaitement typesetté, avec de jolies
polices bien kernées et- NOPE. Au mieux une bonne grosse Arial bien crasse dans
ta face quand c'est pas de la Comic Sans MS rendue avec un crénelage moisi sous
Windows XP, #geocities.</p>
<p>Heureusement, le web a progressé depuis, et en tant que créateurs, nous pouvons
tous apporter notre petit morceau de plomb à l'édifice typographique avec
quelques petites astuces. Ce sont quelques unes de ces astuces que je vais vous
fournir ici, alors ouvrez bien les mirettes.</p>
<h3 id="ampersand-hacking-je-suis-sûr-que-ça-ne-sappelle-pas-comme-ça"><a href="#ampersand-hacking-je-suis-s%C3%BBr-que-%C3%A7a-ne-sappelle-pas-comme-%C3%A7a" class="phenomic-HeadingAnchor">#</a>Ampersand hacking (je suis sûr que ça ne s'appelle pas comme ça)</h3>
<p>Pas loin d'être l'un des plus connus, il est également l'un des plus simples.</p>
<p>Il consiste simplement à remplacer un glyphe de votre texte par le glyphe
correspondant à ce caractère depuis une autre typo. Je m'explique.</p>
<p><img src="./csslickbait.png" alt="cliquez pas, sérieux"></p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">span</span>></span>
  Until the
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"amp"</span>></span>&#x26;amp;<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>
  of time
<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span></code></pre>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.amp</span> {
  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">"Baskerville"</span>;
  <span class="hljs-attribute">font-style</span>: italic
}</code></pre>
<p>Voilà, c'est pas bien folichon mais ça fonctionne : vous pouvez dès à présent
enrouler toutes vos esperluettes (si vous êtes chef de projet, une esperluette
c'est un "et commercial") dans des <code>span</code> pour leur donner une bien chouette
gueule.</p>
<p>Mais ça c'est pour les quelques d'entre vous qui ont la main sur le contenu
textuel du projet, beaucoup d'autres n'ont pas ce luxe et se font fournir de
pauvres textes mal traduits servis par un vieux CMS miteux.</p>
<p>Ce serait chouette d'avoir un moyen pour spécifier une typo pour certains
caractères au cas par cas, non ?</p>
<p>Bonne nouvelle.</p>
<h3 id="go-go-unicode-range-"><a href="#go-go-unicode-range-" class="phenomic-HeadingAnchor">#</a>Go Go Unicode-Range !</h3>
<p>Reprenons notre exemple précédent, que nous allons implémenter avec la feature
<code>unicode-range</code> de CSS.</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">span</span>></span>Until the &#x26;amp; of time<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span></code></pre>
<pre><code class="hljs language-css">@<span class="hljs-keyword">font-face</span> {
  <span class="hljs-attribute">font-family</span>: BaskervilleAmpersand;
  <span class="hljs-attribute">font-style</span>: italic;
  <span class="hljs-attribute">font-weight</span>: normal;
  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">"path/to/your/font/i'm/not/your/mother/Baskerville.eot"</span>);
  <span class="hljs-attribute">unicode-range</span>: U+<span class="hljs-number">0026</span>; <span class="hljs-comment">/* unicode codepoint for &#x26;amp; */</span>
}

<span class="hljs-selector-tag">html</span> {
  <span class="hljs-attribute">font-family</span>: BaskervilleAmpersand, Helvetica, Arial, Serif;
}</code></pre>
<p>Ainsi, en tirant parti d'<code>unicode-range</code> et du stacking des polices, toutes les
esperluettes dans le corps de texte seront rendues en Baskerville et les autres
caractères tomberont en défaut sur Helvetica puis Arial, puis Serif en général.
Bon, ne me faites pas dire ce que je n'ai pas dit, cette propriété CSS n'est pas
parfaite non plus, rien que le fait de devoir aller chercher les codepoints
unicode pour retrouver le caractère à remplacer est assez lourd et fastidieux
(sauf si vous connaissez unicode par cœur mais là vous me faites peur).
L'autre possibilité si vous utilisez PostCSS, c'est le plugin
<a href="https://github.com/ben-eb/postcss-unicode-characters"><code>postcss-unicode-characters</code></a>
par <a href="https://github.com/ben-eb">@beneb</a> qui simplifie grandement l'API d'unicode-range
et que je vous invite à aller voir.
Enfin, la bonne nouvelle c'est que c'est une propriété relativement bien
supportée, à partir d'IE9 vous devriez vous en tirer.</p>
<h3 id="je-suis-sur-ie8"><a href="#je-suis-sur-ie8" class="phenomic-HeadingAnchor">#</a>Je suis sur IE8</h3>
<p>(mes condoléances)
Une autre solution existe pour vous ! Il faut juste créer sa propre police et-
non sérieux revenez c'est pas si horrible, promis.
Bon, reprenons. Pour ce genre de manipulations vous aurez besoin d'un éditeur de
police, j'aime personnellement beaucoup BirdFont, qui a l'avantage d'être gratuit
et disponible sur macOS, Windows, pas mal de versions de Linux et même OpenBSD.
On entre ici dans la partie très procédurière de cet article mais mieux vaut ça
que de vous laisser seuls dans l'interface spartiate de BirdFont.</p>
<p><img src="./birdfont.png"></p>
<p>Spartiate. Bref, le bouton tout en haut à gauche, c'est le bouton "Nouvelle
police", vous pouvez cliquer dessus pour arriver à l'écran suivant.</p>
<p><img src="./birdfont1.png"></p>
<p>À partir de là vous allez devoir choisir un caractère à remplacer. Ça peut être
la lettre E comme ça peut être l'emoji Pizza, personnellement j'ai décidé de
remplacer le symbole dit "paragraphe" ou "Simflouz" si vous avez joué aux Sims
(et "Sporeflouz" si vous avez joué à Spore mais passons).
Si votre caractère est un peu dur à trouver dans la liste, l'option de recherche
est faite pour ça.
Double-cliquer sur un caractère vous emmènera à l'interface d'édition.</p>
<p><img src="./birdfont3.png"></p>
<p>Nous voici dans l'interface d'édition de glyphe proprement dite. Elle ne vous
dépaysera pas trop si vous avez déjà utilisé un outil de création de SVG.
N'hésitez pas à vous en donner à cœur joie si vous avez la fibre créatrice,
personnellement comme vous pouvez le voir sur la capture, je suis déjà un artiste
accompli.
Le menu hamburger en haut à droite vous permettra également d'importer directement
un SVG en tant que glyphe si vous n'avez pas la chance de dessiner aussi bien
que moi et que vous préférez déléguer ce genre de tâches à votre designer.
Ensuite, depuis le même menu hamburger, vous pourrez exporter votre typo dans
tous les formats que vous voudrez si tant est que vous vouliez les exporter en
TTF, EOT ou SVG.</p>
<p>De là, vous n'aurez plus qu'à importer cette font comme dans le chapitre 2 et
vous pourrez enfin rajouter "typesetter" dans vos compétences sur LinkedIn.</p>
<p>Vous n'avez plus qu'à trouver les utilisations les plus intéressantes de ce
genre de pratiques (il y en a plein).</p>
<p>La bise.</p>
]]></description><link>http://putaindecode.io/fr/articles/css/remplacer-glyphes-font/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/css/remplacer-glyphes-font/</guid><pubDate>Tue, 10 Jan 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Petit tour d'horizon de l'animation sur le web (et ailleurs)]]></title><description><![CDATA[<p>Les animations prennent une grande place dans les interfaces utilisateur. Loin de n'apporter qu'un côté esthétique, elles augmentent la performance perçue, améliorent notre expérience en nous aidant à nous repérer et en guidant notre attention. Sur les applications natives, ces animations sont souvent plus naturelles que sur le web, et pour cause, beaucoup de leurs animations sont des <em>springs</em>.</p>
<p>Qu'est-ce qu'une animation <em>spring</em> ? Pour arriver à le définir, voyons comment on a l'habitude de créer des animations avec les technologies web.</p>
<p>CSS possède deux propriétés permettant d'animer des valeurs: les <code>animation</code> et les <code>transition</code>. Au delà de la différence entre leurs capacités au sein de CSS (propriété VS ensemble de propriétés avec des étapes), les deux reposent sur le même mécanisme. On va donc étudier le plus simple: <code>transition</code>.</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.block</span> {
  <span class="hljs-attribute">transition</span>: <span class="hljs-number">300ms</span> linear transform;
}

<span class="hljs-selector-class">.block</span><span class="hljs-selector-pseudo">:hover</span> {
  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(1.05);
}</code></pre>
<p>Cette transition est définie sur un modèle simple : on fixe une durée d'animation (ici <code>300ms</code>) et un easing —<em>ou </em>zizine<em> si vous écoutez <a href="http://putaindecode.io/fr/articles/podcast/1/">le podcast</a></em>— qui est une fonction d'interpolation (ici <code>linear</code>).</p>
<p>L'easing est une fonction toute bête comme vous avez pu en voir au collège et les avez dessinées sur votre calculatrice Casio ou Texas (si comme moi vous étiez le seul péquin de la classe à avoir l'autre modèle, à devoir toujours se démerder parce que les profs savaient pas comment la vôtre marchait).</p>
<p>Bref, une fonction d'easing est assez simple. Par exemple, la <code>linear</code> ça revient à :</p>
<p><img src="./Linear.png"></p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> linear = <span class="hljs-function"><span class="hljs-params">x</span> =></span> x <span class="hljs-comment">// such complicated</span>
    <span class="hljs-comment">// didn't even import `lodash.identity` from npm</span></code></pre>
<p>Le paramètre <code>x</code> varie entre <code>0</code> et <code>1</code>, c'est la progression de l'animation. Ce paramètre vaut <code>0</code> quand vous êtes au début de l'animation et <code>1</code> à la fin.</p>
<p>En faisant à la main une version du système gérant l'animation, ça donne quelque chose dans ce style :</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> transition = <span class="hljs-function">(<span class="hljs-params">{ duration, easing, onUpdate, startValue, endValue }</span>) =></span> {
  <span class="hljs-keyword">const</span> startDate = <span class="hljs-built_in">Date</span>.now() <span class="hljs-comment">// le moment où commence l'animation</span>
  <span class="hljs-comment">// la fonction tick sera executée périodiquement</span>
  <span class="hljs-keyword">const</span> tick = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
    <span class="hljs-keyword">const</span> absoluteProgress = (<span class="hljs-built_in">Date</span>.now() - startDate) / duration <span class="hljs-comment">// on calcule `x`</span>
    <span class="hljs-keyword">const</span> progress = <span class="hljs-built_in">Math</span>.min(absoluteProgress, <span class="hljs-number">1</span>) <span class="hljs-comment">// on fait gaffe de pas déborder</span>
    <span class="hljs-keyword">const</span> progressWithEasing = easing(progress) <span class="hljs-comment">// on applique la fonction d'easing</span>
    <span class="hljs-comment">// pour calculer la valeur, on diminue progressivement la valeur initiale et l'on accroit la valeur finale</span>
    onUpdate((<span class="hljs-number">1</span> - progressWithEasing) * startValue + progressWithEasing * endValue)
    <span class="hljs-keyword">if</span>(progress &#x3C; <span class="hljs-number">1</span>) {
      <span class="hljs-comment">// si c'est pas fini, on repart pour un tour</span>
      requestAnimationFrame(tick)
    }
  }
  tick()
}


myElement.onclick = <span class="hljs-function"><span class="hljs-params">()</span> =></span> transition({
  <span class="hljs-attr">duration</span>: <span class="hljs-number">500</span>,
  <span class="hljs-attr">easing</span>: <span class="hljs-function"><span class="hljs-params">x</span> =></span> x,
  <span class="hljs-attr">onUpdate</span>: <span class="hljs-function">(<span class="hljs-params">value</span>) =></span> myElement.style.transform = <span class="hljs-string">`translateY(<span class="hljs-subst">${ value + <span class="hljs-string">"px"</span> }</span>)`</span>,
  <span class="hljs-attr">startValue</span>: <span class="hljs-number">0</span>,
  <span class="hljs-attr">endValue</span>: <span class="hljs-number">200</span>,
})</code></pre>
<p>Pour définir cette fonction d'easing, CSS vous permet également de configurer des courbes de Bézier cubiques.</p>
<p>Une courbe de Bézier cubique se définit avec 4 points : <code>P0</code>, <code>P1</code>, <code>P2</code> et <code>P3</code>. Il en est ensuite dérivé une courbe à partir de ces quatre points. C'est avec ce mécanisme que fonctionne la plume de la plupart des logiciels d'édition d'image.  </p>
<p><img src="./Bezier.png"></p>
<p>Vu que votre animation commence et finit à des valeurs définies à l'avance, deux points sont fixés à l'avance : <code>P0</code> sera toujours <code>(0, 0)</code> et <code>P3</code> <code>(1, 1)</code>.</p>
<p>Vous avez avec CSS la liberté de définir <code>P1</code> et <code>P2</code> sous la forme <code>cubic-bezier(P1x, P1y, P2x, P2y)</code>. Pour visualiser le fonctionnement, je vous conseille de faire un tour sur <a href="http://cubic-bezier.com">cubic-bezier</a> de <a href="https://twitter.com/leaverou">Lea Verou</a>.</p>
<p>Tout ce que nous avons vu jusque-là sont des animations <em>timées</em> (vive les anglicismes). Leur durée est connue à l'avance et est immuable, les variations possibles se feront dans les limites de ces contraintes.</p>
<p>Ces animations sont très pratiques pour certaines animations basiques et rempliront très bien leur mission, mais elles peuvent rapidement avoir des limites :</p>
<p>Avec CSS :</p>
<ul>
<li>On n'a aucun contrôle sur l'exécution de l'animation</li>
<li>Configurer des animations complexes complique la maintenance</li>
</ul>
<p>Avec un easing basique en général :</p>
<ul>
<li><code>cubic-bezier</code> limite énormément les possibilités d'évolution de la valeur animée (e.g. on souhaite que l'animation ait de l'élasticité, les timing-functions ne permettent de faire qu'un seul débord qui ne parait pas "naturel").</li>
<li>Avoir des animations cohérentes dans toute notre UI est extrêmement contraignant avec CSS</li>
</ul>
<p>Pour l'élasticité, vous pouvez vous débrouiller avec <code>@keyframes</code>, hardcoder toutes les valeurs, les <em>timer</em> à la main, y passer des heures pour vous retrouver avec 60 étapes dans votre animation et au final de ne pas être satisfait du résultat, claquer la porte de votre boulot et partir élever des brebis dans les Pyrénées.</p>
<p>C'est là qu'interviennent les <em>springs</em>.</p>
<p>Une animation spring vous expose en général deux paramètres : <code>tension</code> et <code>friction</code> (ou <code>stiffness</code>, pour rigidité &#x26; <code>damping</code>, pour amortissement, selon les systèmes). Ce sont des valeurs logiques dans ce contexte, puisqu'elles viennent des lois de la physique (big up Newton).</p>
<p>Quelques exemples sur les <a href="http://facebook.github.io/rebound-js/examples/">demos de Rebound.js</a> peuvent vous aider à visualiser ce que représentent ces paramètres au sein de l'animation.</p>
<p>Afin d'obéir à des lois "logiques" de la physique, l'animation spring doit prendre en compte à chaque <code>tick</code> non seulement la valeur actuelle et celle d'arrivée mais aussi sa rapidité actuelle : c'est ce qui lui permet d'enchaîner naturellement les animations.</p>
<p>À chaque frame, il va exécuter la fonction suivante pour déterminer la <code>value</code> et <code>velocity</code> à venir (note : ce côté est une simplification du code utilisé par <a href="https://github.com/chenglou/react-motion">react-motion</a>).</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> unitOfTime = <span class="hljs-number">1</span> / <span class="hljs-number">60</span> <span class="hljs-comment">// the number of seconds in a frame</span>
<span class="hljs-keyword">const</span> precision = <span class="hljs-number">0.01</span>

<span class="hljs-keyword">const</span> step = (
  lastValue,
  lastVelocity,
  toValue,
  stiffness,
  damping
) => {
  <span class="hljs-keyword">const</span> spring = -stiffness * (lastValue - toValue)
  <span class="hljs-keyword">const</span> damper = -damping * lastVelocity

  <span class="hljs-keyword">const</span> all = spring + damper
  <span class="hljs-keyword">const</span> nextVelocity = lastVelocity + all * unitOfTime
  <span class="hljs-keyword">const</span> nextValue = lastValue + nextVelocity * unitOfTime

  <span class="hljs-keyword">const</span> shouldRest = <span class="hljs-built_in">Math</span>.abs(nextVelocity) &#x3C; precision &#x26;&#x26; <span class="hljs-built_in">Math</span>.abs(nextValue - toValue) &#x3C; precision

  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">velocity</span>: shouldRest ? <span class="hljs-number">0</span> : nextVelocity,
    <span class="hljs-attr">value</span>: shouldRest ? toValue : nextValue,
  }
}</code></pre>
<p>Ensuite, une simple fonction <code>spring</code> qui reproduit à peu de choses près la mécanique de notre <code>createTransition</code> vu plus haut :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> spring = <span class="hljs-function">(<span class="hljs-params">{ stiffness = <span class="hljs-number">180</span>, damping = <span class="hljs-number">12</span>, onRest = ((</span>) =></span> {}), toValue }) => <span class="hljs-function"><span class="hljs-params">onUpdate</span> =></span> {
  <span class="hljs-keyword">let</span> frame
  <span class="hljs-keyword">const</span> tick = <span class="hljs-function">(<span class="hljs-params">curr</span>) =></span> {
    <span class="hljs-comment">// on calcule l'état</span>
    <span class="hljs-keyword">const</span> { velocity, value } = step(curr.value, curr.velocity, toValue, stiffness, damping)
    onUpdate({ velocity, value })
    <span class="hljs-comment">// si l'animation n'est pas terminée</span>
    <span class="hljs-keyword">if</span>(velocity !== <span class="hljs-number">0</span> || value !== toValue) {
      <span class="hljs-comment">// on programme la prochaine frame</span>
      frame = requestAnimationFrame(<span class="hljs-function"><span class="hljs-params">()</span> =></span> tick({ value, velocity }))
    } <span class="hljs-keyword">else</span> {
      <span class="hljs-comment">// sinon on prévient que l'animation est au repos</span>
      onRest()
    }
  }
  <span class="hljs-keyword">return</span> {
    <span class="hljs-comment">// afin de permettre aux animations de s'enchaîner, la fonction `start` prend l'état actuel de la valeur</span>
    start: <span class="hljs-function">(<span class="hljs-params">value</span>) =></span> {
      frame = requestAnimationFrame(<span class="hljs-function"><span class="hljs-params">()</span> =></span> tick(value))
    },
    <span class="hljs-attr">stop</span>: <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
      cancelAnimationFrame(frame)
    },
  }
}</code></pre>
<p>Il nous reste à créer une classe "observable" <code>Value</code> qui conserve l'état et l'animation active. Cela permet de stopper l'animation en cours avant de lancer la suivante lorsque cela arrive.</p>
<pre><code class="hljs language-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Value</span> </span>{
  <span class="hljs-keyword">constructor</span>(initialValue) {
    <span class="hljs-keyword">this</span>.value = {
      <span class="hljs-attr">value</span>: initialValue,
      <span class="hljs-attr">velocity</span>: <span class="hljs-number">0</span>,
    }
    <span class="hljs-keyword">this</span>.listeners = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>()
    <span class="hljs-keyword">this</span>.animation = <span class="hljs-literal">null</span>
  }
  addListener(listener) {
    <span class="hljs-keyword">this</span>.listeners.add(listener)
    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
      <span class="hljs-keyword">this</span>.listeners.delete(listener)
    }
  }
  updateValue(nextValue) {
    <span class="hljs-keyword">this</span>.value = nextValue
    <span class="hljs-keyword">this</span>.listeners.forEach(<span class="hljs-function"><span class="hljs-params">listener</span> =></span> listener(<span class="hljs-keyword">this</span>.value.value))
  }
  animate(animation) {
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.animation) {
      <span class="hljs-keyword">this</span>.animation.stop()
    }
    <span class="hljs-keyword">this</span>.animation = animation(<span class="hljs-function">(<span class="hljs-params">v</span>) =></span> <span class="hljs-keyword">this</span>.updateValue(v))
    <span class="hljs-keyword">this</span>.animation.start(<span class="hljs-keyword">this</span>.value)
  }
}</code></pre>
<p>Et voilà, vous avez une animation :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> scale = <span class="hljs-keyword">new</span> Value(<span class="hljs-number">1</span>)

scale.addListener(<span class="hljs-function"><span class="hljs-params">value</span> =></span> myElement.style.transform = <span class="hljs-string">`scale(<span class="hljs-subst">${ value }</span>)`</span>)

myElement.onmousedown = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
  scale.animate(spring({ <span class="hljs-attr">toValue</span>: <span class="hljs-number">2</span> }))
}

myElement.onmouseup = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
  scale.animate(spring({ <span class="hljs-attr">toValue</span>: <span class="hljs-number">1</span> }))
}</code></pre>
<iframe width="100%" height="300" src="//jsfiddle.net/bloodyowl/36d0nc7r/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<p>Les animations spring ont de nombreux avantages. Elles vous permettent d'utiliser un vocabulaire cohérent avec celui du mouvement. Elles vous permettent aussi de gérer de manière intelligente le timing de vos animations : plus besoin de <em>hardcoder</em> le temps qu'elles doivent mettre ; seule la description du mouvement compte. Aussi, vous n'avez plus à vous soucier des changements de valeurs et de ses conséquences sur la cohérence globale d'une animation : le système les gère et s'adapte.</p>
<p>Il existe plusieurs solutions pour les gérer :</p>
<ul>
<li>JS: <a href="http://facebook.github.io/rebound-js/examples/">Rebound.js</a></li>
<li>JS spécifique React: <a href="https://github.com/chenglou/react-motion">react-motion</a></li>
<li>JS spécifique React, utilisé par react-native: <a href="https://github.com/animatedjs/animated">Animated</a></li>
<li>Java (Android): <a href="http://facebook.github.io/rebound/">Rebound</a></li>
<li>Objective-C/Swift (iOS): <a href="https://github.com/facebook/pop">Pop</a></li>
</ul>
<p>La team WebKit <a href="https://twitter.com/webkit/status/748573524734812161">a également proposé</a> l'ajout d'une fonction <code>spring</code> à CSS mais la discussion stagne (à tester dans Safari Technology Preview).</p>
<p>En espérant que ça vous donne des idées d'animations cool à faire.</p>
<p>Bisous bisous.</p>
]]></description><link>http://putaindecode.io/fr/articles/css/animations/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/css/animations/</guid><pubDate>Tue, 20 Dec 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[On lance un podcast]]></title><description><![CDATA[<p>Ça fait quelques mois qu'on en parle au sein de l'équipe de contributeurs, et c'est un projet qui a mis du temps à se développer mais le voilà enfin.</p>
<p>On a passé pas mal de temps à préparer le format, à se motiver à le faire et à acheter le matériel.</p>
<p>Ce premier épisode est encore un peu maladroit (on apprend sur le tas) mais on a bon espoir de l'améliorer avec le temps.</p>
<p>Cet épisode 1 est intitulé …</p>
<h2 id="en-beta-embêtant"><a href="#en-beta-emb%C3%AAtant" class="phenomic-HeadingAnchor">#</a><em>En beta, embêtant</em></h2>
<p>Y participent :</p>
<ul>
<li>Maxime alias <a href="https://twitter.com/MoOx">MoOx</a></li>
<li>Mathieu alias <a href="https://twitter.com/Zoontek">Zoontek</a></li>
<li>Georges alias <a href="https://twitter.com/skinnyfoetusboy">skinnyfoetusboy</a></li>
<li>Matthias alias <a href="https://twitter.com/bloodyowl">bloodyowl</a></li>
</ul>
<p>et on vous y parle de :</p>
<ul>
<li>Yarn, le client NPM</li>
<li>Webpack 2</li>
<li>dotCSS, un retour sur chaque conférence</li>
<li>Sketch 41</li>
<li>Origami Studio</li>
</ul>
<p>Évidemment on digresse SANS ARRÊT, ça manque de structure et le son a quelques soucis, on vous demande d'être indulgents là-dessus : faut bien commencer quelque part 😶</p>
<p>Faites-nous part de vos retours pour qu'on puisse améliorer ce podcast à chaque épisode.</p>
<p>On espère que ça vous plaira !</p>
<p>Bisous.</p>
<iframe width="100%" height="300" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/297382854&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
<h3 id="edit"><a href="#edit" class="phenomic-HeadingAnchor">#</a>Edit:</h3>
<ul>
<li>Le <a href="http://feeds.soundcloud.com/users/soundcloud:users:273901232/sounds.rss">RSS</a></li>
<li>Sur iTunes : <a href="https://itunes.apple.com/fr/podcast/putain-de-code-!/id1185311825?l=en&#x26;mt=2">Putain de Code</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/podcast/1/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/podcast/1/</guid><pubDate>Mon, 12 Dec 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[2 ans avec React, Babel, Webpack et cie]]></title><description><![CDATA[<p>Depuis fin 2014, et un virage radical vers l'écosystème React, j'ai eu
l'occasion de mener plusieurs projets (applis pros, mobiles/hybrides, sites
web...) sur cette stack : React, Webpack, Babel, npm...</p>
<p>Ces deux années ont été très prolifiques dans la communauté JavaScript et React,
le tooling est encore parfois exotique, mais il se stabilise et de gros progrès
ont été faits sur la documentation.</p>
<p><strong>Nous disposons maintenant d'un écosystème incroyablement riche et dynamique,
et d'un paradigme "universel" pour construire les applications de demain, web ou
natives.</strong></p>
<p>React est la bibliothèque de facto pour ce type d'applications, mais on peut le
remplacer assez facilement par une alternative comme
<a href="https://preactjs.com/">Preact</a> ou <a href="http://infernojs.org/">Inferno</a>, donc toutes
les connaissances acquises sur cette bibliothèque <strong>et son écosystème</strong> sont
exploitables ailleurs dans la communauté JavaScript.</p>
<p>Voici un petit recap de cette stack magique :)</p>
<h2 id="tldr"><a href="#tldr" class="phenomic-HeadingAnchor">#</a>TL;DR;</h2>
<p>React en lui-même est le plus simple à appréhender dans cette stack.</p>
<p>Son écosystème, riche et évolutif, l'est moins.</p>
<h2 id="babeles2015"><a href="#babeles2015" class="phenomic-HeadingAnchor">#</a>Babel/ES2015</h2>
<p><img src="/assets/babel.png"></p>
<h3 id="use-next-generation-javascript-today"><a href="#use-next-generation-javascript-today" class="phenomic-HeadingAnchor">#</a>Use next generation JavaScript, today.</h3>
<p>La communauté JavaScript a massivement adopté le transpileur Babel, qui permet
de coder en JavaScript version ES2015 ou supérieure puis de convertir en code
compatible avec les navigateurs du marché.</p>
<p>Pour apprendre ES2015 et plus :</p>
<ul>
<li><a href="http://putaindecode.io/fr/tag/ES6">articles sur putaindecode.io</a></li>
<li>exercices en ligne : <a href="http://es6katas.org">es6katas.org</a></li>
<li>tutorial Babel : <a href="http://babeljs.io/docs/learn-es2015">babeljs.io</a>  </li>
<li>comparaisons ES5/ES2015 :
<a href="http://es6-features.org/#BlockScopedVariables">es6-features.org</a></li>
</ul>
<p>Vous pouvez très bien faire de l'ES2015 sans Babel, puisque <a href="https://kangax.github.io/compat-table/es6/">les navigateurs
modernes en supportent une grande
partie</a>, mais le support est inégal,
d'où l'idée d'utiliser un transpileur comme Babel qui convertit en ES5.</p>
<p>Le format JSX, est devenu un standard qui peut simplifier le développement :</p>
<ul>
<li>il permet de centraliser la présentation et la logique d'un composant au même
endroit</li>
<li>d'utiliser une syntaxe XML-like plus rigoureuse, mais bénéfique</li>
<li>d'utiliser du JavaScript pur au lieu d'un pseudo-langage comme on trouve dans
les moteurs de template habituels</li>
</ul>
<p>Ça peut paraître déroutant au début mais ça rentre vite !</p>
<p>Plus d'infos sur JSX dans <a href="https://facebook.github.io/react/docs/introducing-jsx.html">Introducing
JSX</a> sur la doc
React.</p>
<h2 id="npm"><a href="#npm" class="phenomic-HeadingAnchor">#</a>npm</h2>
<p><img src="/assets/npm.png"></p>
<p>Quel que soit votre besoin, il y a sûrement déjà un module npm pour ça :)</p>
<p>Pour bien choisir vos packages, regardez l'activité du projet sur GitHub
(commits, issues, tests, contributeurs...)</p>
<h3 id="moins-de-code-cest-moins-de-bugs"><a href="#moins-de-code-cest-moins-de-bugs" class="phenomic-HeadingAnchor">#</a>Moins de code c'est moins de bugs</h3>
<p>Votre appli doit utiliser un maximum de code externe, qui est déjà validé,
testé... séparément. Publiez un maximum de modules indépendants, en open source
si possible, et utilisables hors-contexte (<a href="https://addyosmani.com/first/">FIRST
principle</a>).</p>
<p>Ceci implique de suivre les corrections/évolutions des dits modules et
d'utiliser le <a href="https://docs.npmjs.com/getting-started/semantic-versioning">semantic
versioning</a> à bon
escient.</p>
<p>NB: Dans sa lancée open-source, Facebook vient de publier une alternative au CLI
npm : <a href="http://yarnpkg.org">yarn</a> plus rapide, fiable et sécurisé.</p>
<h2 id="webpack"><a href="#webpack" class="phenomic-HeadingAnchor">#</a>Webpack</h2>
<p><img src="/assets/webpack.png"></p>
<h3 id="le-saviez-vous-"><a href="#le-saviez-vous-" class="phenomic-HeadingAnchor">#</a>Le saviez-vous ?</h3>
<p>Webpack a coûté aux devs <strong>2.312.533 heures</strong> en 2015. Par jour.</p>
<h3 id="un-grand-pouvoir-implique-de-grandes-responsabilités"><a href="#un-grand-pouvoir-implique-de-grandes-responsabilit%C3%A9s" class="phenomic-HeadingAnchor">#</a>Un grand pouvoir implique de grandes responsabilités</h3>
<p>Webpack est puissant, il remplace browserify ou vos multiples tâches grunt,
gulp, blurp... qui géraient votre pipeline d'assets.</p>
<p>À partir du point d'entrée de votre application uniquement, par exemple
<code>index.js</code>, il est capable de servir et bundler toutes les dépendances (code,
images, CSS...) de votre projet automatiquement, grâce aux nombreux
<a href="https://webpack.github.io/docs/loaders.html">loaders</a>.</p>
<p>Pour cela, les assets doivent être correctement déclarés dans le code :</p>
<pre><code class="hljs language-js"><span class="hljs-comment">// require some CSS</span>
<span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">'./styles.css'</span>
<span class="hljs-keyword">const</span> ex1 = <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{</span> <span class="hljs-attr">styles.title</span> }></span>title<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>

<span class="hljs-comment">// require an image</span>
<span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">'./logo.png'</span>
<span class="hljs-keyword">const</span> img = <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{</span> <span class="hljs-attr">logo</span> } /></span></span></code></pre>
<p>Et la célèbre <a href="https://webpack.js.org/configuration/">config de webpack</a> permet
de tuner votre build à tous les niveaux.</p>
<p>Plus de détails sur Webpack sur <a href="http://putaindecode.io/fr/tag/webpack">les articles Putain de code !
dédiés</a>.</p>
<h2 id="css"><a href="#css" class="phenomic-HeadingAnchor">#</a>CSS</h2>
<p><img src="/assets/css-modules.png"></p>
<h3 id="le-saviez-vous--1"><a href="#le-saviez-vous--1" class="phenomic-HeadingAnchor">#</a>Le saviez-vous ?</h3>
<p>Le CSS est un sport de haut niveau.</p>
<h3 id="css-in-2016"><a href="#css-in-2016" class="phenomic-HeadingAnchor">#</a>CSS in 2016</h3>
<p>Selon la complexité de vos designs, le CSS peut être ce qui prend le plus de
temps, entre l'intégration, le responsive, et les animations.</p>
<p>Et la qualité et la modularité du CSS est essentielle pour la maintenabilité des
applications.</p>
<p>Pour créer des composants réutilisables nous pouvons maintenant utiliser les
<a href="https://github.com/css-modules/css-modules">CSS modules</a>, qui ont l'avantage
d'être du CSS classique, mais d'être scopés aux composants, et, accessibles
depuis le JavaScript (plus de CSS global). Et le <a href="https://youtu.be/WyFGfMFjfH4?t=26m23s">CSS in
JS</a> peut compléter/remplacer si besoin
pour les cas les plus dynamiques.</p>
<p>A défaut, vous pouvez toujours utiliser du CSS global si vous respectez
scrupuleusement les <a href="http://putaindecode.io/fr/articles/css/bem/">conventions
BEM</a>. Découvrez d'autres <a href="http://putaindecode.io/fr/tag/css">articles
dédiés au CSS sur putaindecode.io</a>.</p>
<p>Il existe plusieurs bibliothèques de composants UI assez fournies pour React :</p>
<ul>
<li><a href="http://jxnblk.com/rebass/">rebass</a></li>
<li><a href="http://ant.design">ant.design</a></li>
<li><a href="http://semantic-ui.com">semantic-ui</a></li>
<li><a href="http://react-toolbox.com/">react-toolbox</a></li>
<li><a href="http://blueprintjs.com">blueprintjs</a></li>
</ul>
<p>Et voici un article recensant des <a href="http://davidwells.io/19-open-source-react-component-libraries-to-use-in-your-next-project/">librairies de composants React
open-source</a>.</p>
<h2 id="react--learn-once-run-everywhere"><a href="#react--learn-once-run-everywhere" class="phenomic-HeadingAnchor">#</a>React : Learn once, run everywhere</h2>
<p><img src="/assets/react.png"></p>
<p>Plus qu'une bibliothèque ou un framework, React est un paradigme de
programmation d'interfaces utilisateurs, qui permet d'adresser de nombreuses
plateformes, avec toujours du code React "standard".</p>
<p>Théoriquement, une application codée en React est capable de produire n'importe
quel output, par exemple du HTML pour le web, du natif avec
<a href="https://facebook.github.io/react-native/">react-native</a>, du
<a href="https://github.com/ProjectSeptemberInc/gl-react">WebGL</a>, du
<a href="https://github.com/Yomguithereal/react-blessed">terminal</a>, de la
<a href="https://github.com/FormidableLabs/react-music">musique</a>...</p>
<p>Et pour toutes ces targets, une convention générale s'applique :</p>
<pre><code style="font-size:2em">ui = f(state)</pre></code>
<p>À tout moment, à partir un <code>state</code> donné, une application ou un composant React
est capable de se "render" correctement dans l'état désiré.</p>
<p>Le fonctionnement interne est donc plutôt straightforward, les composants se
passent simplement des <code>props</code> (valeurs et callbacks) de parent à enfant, et
certains composants peuvent avoir un <code>state</code> local qui, une fois modifié,
déclenchera un re-render du composant et de ses descendants.</p>
<p>Les composants doivent être simples, focus, composables.</p>
<pre><code class="hljs language-js">&#x3C;Toolbar>
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">Icon</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"success"</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{</span> <span class="hljs-attr">onClickSuccess</span> } /></span>
  </span>&#x3C;Menu>
    &#x3C;Icon name="warning" onClick={ onClickWarning } />
    &#x3C;Icon name="error" onClick={ onClickError } />
  &#x3C;/Menu>
&#x3C;/Toolbar></code></pre>
<p>Au niveau performances, React ne fait pas de miracles malgré le
<a href="http://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/">virtual-dom</a>;</p>
<p>À chaque fois qu'un composant reçoit de nouvelles props ou modifie son state,
React appelle la méthode <code>render</code> de ce dernier ainsi que de ces descendants.
Même s'il ne modifie pas le DOM, le fait de comparer les deux arbres retournés
par render peut s'avérer coûteux si votre composant présente beaucoup de
contenu. Heureusement, React permet aux développeurs d'intervenir avant le
render et l'annuler s'il n'est pas nécessaire avec <code>shouldComponentUpdate</code>.</p>
<p>Plus d'<a href="http://putaindecode.io/fr/tag/react">articles sur React sur putain de
code</a></p>
<h2 id="redux"><a href="#redux" class="phenomic-HeadingAnchor">#</a>Redux</h2>
<p><a href="https://css-tricks.com/learning-react-redux/"><img src="react-redux-csstricks.png" alt="React standard VS redux architecture (from
css-tricks.com)"></a></p>
<p>Pour les applications plus complexes, <a href="http://reduxjs.org">redux</a> va gèrer
l'état de l'application de manière globale et externe aux composants,
standardiser les évènements (actions), gérer les re-renders, et permettre
d'aller vers des <a href="https://github.com/markerikson/redux-ecosystem-links">interactions plus
avancées</a>.</p>
<p>Idéalement, <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.j9rp2pr98">tous vos composants sont
dumbs</a>
et votre gestionnaire de state (par exemple redux) va gérer l'intelligence de
l'application et les re-renders de manière découplée et optimisée.</p>
<p>Plus d'articles sur redux sur Putain de code ! :
<a href="http://putaindecode.io/fr/tag/redux/">http://putaindecode.io/fr/tag/redux/</a></p>
<h2 id="tips"><a href="#tips" class="phenomic-HeadingAnchor">#</a>Tips</h2>
<h3 id="storybook"><a href="#storybook" class="phenomic-HeadingAnchor">#</a>Storybook</h3>
<p>Utiliser un outil comme
<a href="https://github.com/storybooks/react-storybook">storybook</a> permet de travailler
sur les composants hors-contexte, de pouvoir les visualiser dans différents
états pendant que vous travaillez... et ainsi d'avoir une base saine de
composants réutilisables.</p>
<p>Votre bibliothèque de composants peut même être un projet à part, que vous
importerez dans vos différentes applications. Par exemple, Cloudflare publie
séparément <a href="https://github.com/cloudflare/cf-ui">tous ses composants UI réutilisables</a>.</p>
<h3 id="composition"><a href="#composition" class="phenomic-HeadingAnchor">#</a>Composition</h3>
<p>Utilisez au maximum la composition de composants React pour garder des
composants simples et réutilisables.</p>
<p>Plus de détails sur le <a href="http://putaindecode.io/fr/articles/js/react/higher-order-component">pattern "higher order
components"</a></p>
<h3 id="nvm"><a href="#nvm" class="phenomic-HeadingAnchor">#</a>nvm</h3>
<p>Utilisez <a href="https://github.com/creationix/nvm">Node Version Manager</a> aka nvm qui
permet de gérer plusieurs environnements Node.js sur une même machine.
Indispensable pour travailler sur plusieurs projets.</p>
<h3 id="learning-curve"><a href="#learning-curve" class="phenomic-HeadingAnchor">#</a>Learning curve</h3>
<p>Concentrez-vous sur une techno/outil à la fois et n'utilisez pas ce dont vous
n'avez pas encore besoin.</p>
<blockquote>
<p>Make it work, make it right, make it fast.</p>
</blockquote>
<h2 id="comment-démarrer-"><a href="#comment-d%C3%A9marrer-" class="phenomic-HeadingAnchor">#</a>Comment démarrer ?</h2>
<p>Pour créer une application, le plus simple est d'utiliser
<a href="https://github.com/facebookincubator/create-react-app">create-react-app</a>.</p>
<p>Si c'est pour créer un composant React que vous allez publier, alors
<a href="https://github.com/insin/nwb">nwb</a> est plus adapté.</p>
<p>Pour créer un site web comme <a href="http://putaindecode.io">putaindecode.io</a> vous
pouvez utiliser un générateur de site statique comme
<a href="http://phenomic.io">phenomic.io</a>.</p>
<h2 id="pourquoi-cest-si-complexe-"><a href="#pourquoi-cest-si-complexe-" class="phenomic-HeadingAnchor">#</a>Pourquoi c'est si complexe ?</h2>
<p>Cette stack, qui peut paraître lourde en outillage, permet de créer des apps
riches, performantes, testables, évolutives, multi-plateformes.</p>
<p>Une fois l'outillage en place et assimilé, la productivité est excellente
(ES2015, npm, tests, developer experience, dev/build/deploy...).</p>
<p>Dans la plupart des cas, les boilerplates cités ci-dessus vous fournissent tout
le nécessaire.</p>
<h2 id="must-read-and-watch"><a href="#must-read-and-watch" class="phenomic-HeadingAnchor">#</a>Must read and watch</h2>
<ul>
<li><a href="https://facebook.github.io/react/tutorial/tutorial.html">Intro to React</a></li>
<li>Free videos
<a href="https://egghead.io/courses/react-fundamentals">egghead.io/react-fundamentals</a></li>
<li>Free videos
<a href="https://egghead.io/courses/getting-started-with-redux">egghead.io/getting-started-with-redux</a></li>
<li><a href="https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367#.8swndjba2">You might not need
redux</a></li>
<li><a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.v583rvea1">Smart VS dumb
components</a></li>
<li><a href="http://putaindecode.io/fr/articles/js/react/higher-order-component/">Les patterns Provider &#x26; Higher-Order Component avec
React</a></li>
<li><a href="https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e#.t74wxicu0">React higher components in
depth</a></li>
</ul>
<h2 id="liens"><a href="#liens" class="phenomic-HeadingAnchor">#</a>Liens</h2>
<blockquote>
<p>Quelques pépites</p>
</blockquote>
<ul>
<li><a href="https://github.com/facebookincubator/create-react-app">create-react-app</a> :
CLI complet pour faire une application react</li>
<li><a href="https://github.com/insin/nwb">nwb</a> : CLI complet faire un composant react
(dev,build,demo,tests,npm...)</li>
<li><a href="https://github.com/andreypopp/react-css-components">react-css-components</a> :
créer des composants React à partir de CSS</li>
<li><a href="https://github.com/markerikson/redux-ecosystem-links">redux-ecosystem-links</a></li>
<li><a href="https://docs.npmjs.com/misc/scripts">npm scripts docs</a></li>
<li><a href="https://github.com/ngokevin/aframe-react">aframe-react</a> : Build VR
experiences with A-Frame and React</li>
<li><a href="http://reactpatterns.com">reactpatterns.com</a> : quelques patterns react</li>
<li><a href="http://phenomic.io">phenomic.io</a> : react-based static site generator</li>
<li><a href="http://jsbooks.revolunet.com">jsbooks.revolunet.com</a> : free JavaScript
ebooks</li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/frontend/2016-2-ans-avec-react-babel-webpack-et-cie/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/frontend/2016-2-ans-avec-react-babel-webpack-et-cie/</guid><pubDate>Thu, 01 Dec 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Votre première app React Native]]></title><description><![CDATA[<p>Cela fait déjà plus d'un an que Facebook a publié la première version de React Native.
Longtemps considéré comme une expérimentation sympathique (après tout, il est né lors d'un hackathon), un cycle de release soutenu d'une version majeure toutes les 2 semaines a fait qu'aujourd'hui l'écosystème est suffisamment riche et stable pour déployer une app iOS et Android en production.</p>
<h2 id="quels-problèmes-avec-les-solutions-hybrides-"><a href="#quels-probl%C3%A8mes-avec-les-solutions-hybrides-" class="phenomic-HeadingAnchor">#</a>Quels problèmes avec les solutions hybrides ?</h2>
<p>Des solutions pour développer une application mobile multiplateforme en JS existent déjà : je pense notamment à <a href="https://cordova.apache.org/">Cordova</a> ou à son superset <a href="http://ionicframework.com/">Ionic</a>. Conçu autour d'une webview système (un navigateur embedded - Safari sur iOS, Chrome sur Android) affichée en plein écran, vous utilisez des technologies web classiques : HTML, CSS et JS. Il est possible d'installer des plugins afin d'enrichir le moteur JavaScript avec de nouvelles APIs en plus des APIs navigateur.
Ainsi, <code>cordova-plugin-contacts</code> permet d'accéder au carnet d'adresses du smartphone, <code>cordova-plugin-vibration</code> permet de faire vibrer celui-ci, etc.</p>
<p>Le problème, c'est que si l'utilisation de plugins permet de faire le pont avec le code natif (un message est envoyé de la partie JS à la partie Objective-C / Java, qui l'exécute de son côté et renvoie le résultat au JS), l'UI de l'application n'utilise elle pas du tout le layout natif des OS mobiles. Les performances et le look'n'feel de celle-ci seront donc équivalente à une app web, et non une app mobile.</p>
<p>Avec React Native, point de navigateur embedded, de HTML ou de CSS : vous devez composer vos interfaces à l'aide de composants React qui font appel au layout natif de la plateforme. Un exemple simple : <code>&#x3C;View></code> (qui est l'équivalent d'une <code>&#x3C;div></code> HTML) communique via un pont JS &#x3C;-> Objective-C / Java pour contrôler une UIView (sur iOS) ou une android.view. Les performances de l'UI sont donc quasi similaires aux performances natives.</p>
<h2 id="découverte-de-lenvironnement-de-dev"><a href="#d%C3%A9couverte-de-lenvironnement-de-dev" class="phenomic-HeadingAnchor">#</a>Découverte de l'environnement de dev</h2>
<p>Fatigués par JavaScript et son tooling un peu trop fourni ? Rassurez-vous : vous n'avez strictement rien à configurer pour commencer à utiliser React Native. Vous disposez out-of-the-box d'un packager Babel et d'un <a href="https://github.com/facebook/react-native/tree/master/babel-preset">preset custom</a> qui intègre les fonctionnalités de ES2015, mais également le support de React / JSX (encore heureux), de <a href="https://flowtype.org/">Flow</a> et d'autres helpers bienvenus tels que <code>async / await</code>.</p>
<p>En bons passionnés de bière, nous allons réaliser ensemble une app qui requête la <a href="https://punkapi.com/">PunkAPI</a> (faites la demande d'une clé API via le formulaire prévu à cet effet).</p>
<p>Je vous renvoie à la <a href="https://facebook.github.io/react-native/docs/getting-started.html">documentation officielle</a> pour ce qui est de l'installation des dépendances (celles-ci variant selon votre OS et l'OS cible).
Xcode / Android Studio, node et watchman étant installés, ouvrez un terminal et initiez le projet :</p>
<pre><code>npm install -g react-native-cli
react-native init PutainDeBiere
</code></pre>
<p>Une fois le projet initialisé, le CLI vous informe de la façon dont lancer votre application : faites-le dans la foulée. En ce qui me concerne, je développe pour iOS.</p>
<pre><code class="hljs language-bash">react-native run-ios</code></pre>
<p>Selon votre plateforme cible, ouvrez <code>index.ios.js</code> ou <code>index.android.js</code> dans votre éditeur préféré. Modifiez quelque peu le texte et rafraichissez votre app via <code>Command⌘ + R</code>, deux pressions sur la touche <code>R</code> (émulateur Android).</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>

<span class="hljs-keyword">import</span> React, { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">import</span> {
  AppRegistry,
  StyleSheet,
  Text,
  View
} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-native'</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  render() {
    <span class="hljs-keyword">return</span> (
      <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{styles.container}</span>></span>
        </span>&#x3C;Text style={styles.welcome}>
          Welcome to PutainDeBiere!
        &#x3C;/Text><span class="xml">
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">View</span>></span></span>
    )
  }
}

<span class="hljs-keyword">const</span> styles = StyleSheet.create({
  <span class="hljs-attr">container</span>: {
    <span class="hljs-attr">flex</span>: <span class="hljs-number">1</span>,
    <span class="hljs-attr">justifyContent</span>: <span class="hljs-string">'center'</span>,
    <span class="hljs-attr">alignItems</span>: <span class="hljs-string">'center'</span>,
    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">'#F5FCFF'</span>,
  },
  <span class="hljs-attr">welcome</span>: {
    <span class="hljs-attr">fontSize</span>: <span class="hljs-number">20</span>,
    <span class="hljs-attr">textAlign</span>: <span class="hljs-string">'center'</span>,
    <span class="hljs-attr">margin</span>: <span class="hljs-number">10</span>,
  },
})

AppRegistry.registerComponent(<span class="hljs-string">'PutainDeBiere'</span>, () => App)</code></pre>
<figure>
  <img src="welcome.png" alt="welcome PutainDeBiere preview" />
  <figcaption>Une bien jolie première étape</figcaption>
</figure>
<h2 id="récupération-des-données"><a href="#r%C3%A9cup%C3%A9ration-des-donn%C3%A9es" class="phenomic-HeadingAnchor">#</a>Récupération des données</h2>
<p>Afin de requêter notre API, React Native nous offre plusieurs plusieurs solutions: <code>fetch()</code> ou <code>XMLHttpRequest</code>. Tenez vous en <strong>uniquement</strong> à l'utilisation de la première, la deuxième n'étant présente que pour assurer une compatibilité avec des librairies tierces.</p>
<p><em>/!\ Notre clé API doit être encodée en base64. La function <code>btoa()</code> n'étant pas disponible en React Native, il est nécessaire d'installer une dépendance.</em></p>
<pre><code class="hljs language-bash">npm install --save base-64</code></pre>
<p>Histoire de séparer notre logique API de nos composants React, nous allons créer un fichier nommé <code>punkapi.js</code> à la racine de notre projet.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> base64 <span class="hljs-keyword">from</span> <span class="hljs-string">'base-64'</span> <span class="hljs-comment">// importez la dépendance tout juste installée</span>

<span class="hljs-keyword">const</span> rootEndpoint = <span class="hljs-string">'https://punkapi.com/api/v1'</span>
<span class="hljs-comment">// pour simplifier la compréhension de ce tuto, nous renseignons la clé API "en dur"</span>
<span class="hljs-comment">// ne faites jamais cela au sein de vos projets (voir http://12factor.net/fr/config)</span>
<span class="hljs-keyword">const</span> punkApiKey = <span class="hljs-string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>
<span class="hljs-keyword">const</span> password = <span class="hljs-string">''</span> <span class="hljs-comment">// la punk API n'utilise aucun mot de passe</span>
<span class="hljs-keyword">const</span> authBase64 = base64.encode(<span class="hljs-string">`<span class="hljs-subst">${punkApiKey}</span>:<span class="hljs-subst">${password}</span>`</span>)

<span class="hljs-keyword">const</span> headers = {
  <span class="hljs-string">'Content-Type'</span>: <span class="hljs-string">'application/json'</span>,
  <span class="hljs-string">'Accept'</span>: <span class="hljs-string">'application/json'</span>,
  <span class="hljs-string">'Authorization'</span>: <span class="hljs-string">`Basic <span class="hljs-subst">${authBase64}</span>`</span> <span class="hljs-comment">// HTTP basic auth</span>
}

<span class="hljs-comment">// retourne une recette de bière au hasard</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getRandomBrewdog = <span class="hljs-function"><span class="hljs-params">()</span> =></span>
  fetch(<span class="hljs-string">`<span class="hljs-subst">${rootEndpoint}</span>/beers/random`</span>, { headers })
    .then(<span class="hljs-function">(<span class="hljs-params">{status, json}</span>) =></span> {
      <span class="hljs-keyword">if</span> (status !== <span class="hljs-number">200</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`API answered with status code <span class="hljs-subst">${status}</span>`</span>) <span class="hljs-comment">// gestion du status code HTTP</span>
      <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> json() <span class="hljs-comment">// on parse la réponse en JSON</span>
    })</code></pre>
<p>Nous allons maintenant modifier notre composant <code>&#x3C;App></code> afin de faire une requête simple d'une bière au hasard juste avant le montage de celui-ci.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { getRandomBrewdog } <span class="hljs-keyword">from</span> <span class="hljs-string">'./punkapi'</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  componentWillMount() {
    getRandomBrewdog() <span class="hljs-comment">// fetch() retourne une Promise</span>
      .then(<span class="hljs-function"><span class="hljs-params">json</span> =></span> <span class="hljs-built_in">console</span>.log(json))
      .catch(<span class="hljs-function"><span class="hljs-params">error</span> =></span> <span class="hljs-built_in">console</span>.error(error))
  }

  …
}</code></pre>
<p>Vous apercevez la présence d'un appel à <code>console.log()</code>. Pour y accéder, rien de plus simple: pressez <code>Command⌘ + D</code> au sein de l'émulateur iOS, ou appuyez sur le bouton <code>Menu</code> de l'émulateur Android. Celui-ci contient de multiples choses avec lesquelles je vous laisserai expérimenter par la suite; ce qui nous intéresse ici c'est le bouton <code>Debug JS Remotely</code>, qui va ouvrir un nouvel onglet dans Chrome où sera exécuté notre code JS.</p>
<p>Il devient donc possible d'ouvrir les Chrome Devtools (dont la console) afin de débuguer notre app.</p>
<figure>
  <img src="devmenu.png" alt="devmenu + chrome devtools" />
  <figcaption>Jusqu'ici tout va bien</figcaption>
</figure>
<h2 id="présentation-des-données"><a href="#pr%C3%A9sentation-des-donn%C3%A9es" class="phenomic-HeadingAnchor">#</a>Présentation des données</h2>
<p>Afin d'afficher les informations que nous venons de récupérer, nous allons avoir besoin de plusieurs éléments (heureusement fournis), à savoir de quoi encapsuler d'autres composants (une <code>&#x3C;View></code> ~= une <code>&#x3C;div></code> HTML), de quoi rendre du texte (<code>&#x3C;Text></code> ~= <code>&#x3C;span></code>), un bouton (nous allons utiliser <code>&#x3C;TouchableOpacity></code>, une zone dont l'opacité est modifiée lors d'un <code>onTouch</code>) et enfin d'un spinner pour indiquer qu'une requête est en cours (<code>&#x3C;ActivityIndicator></code>).</p>
<p>Nous allons également rendre notre unique composant stateful afin de stocker quelques informations retournées par l'API.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> React, { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">import</span> {
  AppRegistry,
  StyleSheet,
  ActivityIndicator, <span class="hljs-comment">// import des composants</span>
  TouchableOpacity,
  Text,
  View,
} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-native'</span>

<span class="hljs-keyword">import</span> { getRandomBrewdog } <span class="hljs-keyword">from</span> <span class="hljs-string">'./punkapi'</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  <span class="hljs-keyword">constructor</span>(props) {
    <span class="hljs-keyword">super</span>(props)

    <span class="hljs-comment">// la state de notre composant est utilisé pour</span>
    <span class="hljs-comment">// stocker quelques infos renvoyées par l'API</span>
    <span class="hljs-keyword">this</span>.state = {
      <span class="hljs-attr">name</span>: <span class="hljs-string">''</span>, <span class="hljs-comment">// nom de la bière</span>
      description: <span class="hljs-string">''</span>, <span class="hljs-comment">// sa description</span>
      isLoading: <span class="hljs-literal">false</span> <span class="hljs-comment">// la requête API est-elle en cours ?</span>
    }
  }

  <span class="hljs-comment">// nous externalisons cette fonction afin de</span>
  <span class="hljs-comment">// pouvoir l'appeler lorsqu'on le souhaite</span>
  _getRandomBrewdogWithFeedback = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
    <span class="hljs-keyword">this</span>.setState({ <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">true</span> })

    getRandomBrewdog()
      .then(<span class="hljs-function"><span class="hljs-params">json</span> =></span> <span class="hljs-keyword">this</span>.setState({
        <span class="hljs-attr">name</span>: json.name,
        <span class="hljs-attr">description</span>: json.description,
        <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// la requête est terminée</span>
      }))
      .catch(<span class="hljs-function"><span class="hljs-params">error</span> =></span> <span class="hljs-built_in">console</span>.error(error))
  }

  componentWillMount() {
    <span class="hljs-keyword">this</span>._getRandomBrewdogWithFeedback()
  }

  render() {
    <span class="hljs-keyword">const</span> content = <span class="hljs-keyword">this</span>.state.isLoading
      ? <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">ActivityIndicator</span> /></span> // si requête en cours, on affiche un spinner
      : </span>&#x3C;Text style={styles.welcome}>
          Welcome to PutainDeBiere!
        &#x3C;/Text><span class="xml">

    return (
      </span>&#x3C;View style={styles.container}>
        {content}
      &#x3C;/View><span class="xml">
    )
  }
}

…</span></code></pre>
<p>Votre application affiche dorénavant un spinner quelques secondes avant de rendre le fameux "Welcome to PutainDeBiere!" le temps que la requête à la punkAPI se fasse. Continuons de customiser ce render afin d'afficher les informations retournées (et maintenant présentes dans le state de notre app).</p>
<pre><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  …

  render() {
    <span class="hljs-keyword">const</span> content = <span class="hljs-keyword">this</span>.state.isLoading
      ? <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">ActivityIndicator</span> /></span> // si requête en cours, on affiche un spinner
      : </span>&#x3C;View style={styles.infosContainer}>
          &#x3C;Text style={styles.name}>
            {this.state.name} // sinon on affiche le nom de la bière
          &#x3C;/Text>

          &#x3C;Text style={styles.description}>
            {this.state.description} // sa description
          &#x3C;/Text>

          &#x3C;TouchableOpacity // on ajoute un "bouton" qui requête une autre bière aléatoire
            onPress={this._getRandomBrewdogWithFeedback}
            style={styles.button}
          >
            &#x3C;Text>Grab a new beer!&#x3C;/Text>
          &#x3C;/TouchableOpacity>
        &#x3C;/View><span class="xml">

    return (
      </span>&#x3C;View style={styles.container}>
        {content}
      &#x3C;/View><span class="xml">
    )
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  // ajout de styles divers
  infosContainer: {
    margin: 30,
  },
  name: {
    fontSize: 18,
    fontWeight: '700',
    marginBottom: 10,
  },
  description: {
    marginBottom: 10,
  },
  button: {
    borderWidth: 1,
    borderColor: '#000',
    borderRadius: 3,
    padding: 5,
    justifyContent: 'center',
    alignItems: 'center',
  }
})</span></code></pre>
<figure>
  <img src="final_result.png" alt="devmenu + chrome devtools" />
  <figcaption>Le rendu "final"</figcaption>
</figure>
<h2 id="et-maintenant-"><a href="#et-maintenant-" class="phenomic-HeadingAnchor">#</a>Et maintenant ?</h2>
<p>Si vous connaissez déjà React, vous pouvez:</p>
<ul>
<li>améliorer le code de l'app avec l'ajout de redux (par exemple) afin de supprimer le state de notre composant</li>
<li>créer un composant stateless "&#x3C;Button>"</li>
<li>styliser davantage l'app à l'aide d'<a href="https://facebook.github.io/react-native/docs/image.html">images</a> ou d'<a href="https://facebook.github.io/react-native/docs/animations.html">animations</a></li>
<li>désactiver et modifier le style du bouton lors d'une requête API</li>
<li>gérer les erreurs de requêtage de façon un poil plus élégante que de balancer une erreur à la tête de l'utilisateur</li>
</ul>
<p>Si ce n'est pas le cas, n'hésitez pas à lire ces deux articles pour vous familiariser avec ces librairies avant de continuer sur votre lancée:</p>
<ul>
<li><a href="/fr/articles/js/react/">Introduction à ReactJS</a></li>
<li><a href="/fr/articles/js/redux/">Redux, comment ça marche ?</a></li>
</ul>
<p>Bonne découverte !</p>
]]></description><link>http://putaindecode.io/fr/articles/js/react/native/introduction/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/react/native/introduction/</guid><pubDate>Tue, 04 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Pourquoi j'ai arrêté d'utiliser CSS]]></title><description><![CDATA[<p>CSS est un langage horriblement dangereux, parce qu'il mêle des concepts complètement pétés et une folle capacité à faire confondre facilité et simplicité aux gens qui l'utilisent.</p>
<h2 id="quest-ce-qui-ne-va-pas-"><a href="#quest-ce-qui-ne-va-pas-" class="phenomic-HeadingAnchor">#</a>Qu'est-ce qui ne va pas ?</h2>
<p>À l'origine, CSS a été conçu pour styler des documents, pas des applications. Du coup lorsqu'on doit <em>scale</em>, c'est rapidement douloureux.</p>
<h3 id="les-sélecteurs"><a href="#les-s%C3%A9lecteurs" class="phenomic-HeadingAnchor">#</a>Les sélecteurs</h3>
<p>Les sélecteurs sont des <strong>variables globales mutables</strong>. Lorsque vous faites :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.selector</span> {
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;
}</code></pre>
<p>C'est comme si en JavaScript vous faisiez :</p>
<pre><code class="hljs language-javascript"><span class="hljs-built_in">window</span>.selector = (<span class="hljs-built_in">window</span>.selector || []).concat({
  <span class="hljs-attr">fontSize</span>: <span class="hljs-string">"1rem"</span>,
})</code></pre>
<p>Ça veut dire que :</p>
<ul>
<li>La définition d'un style associé à un sélecteur peut être redéfinie ailleurs</li>
<li>Si on associe plusieurs styles à un sélecteur, les derniers définis dans le CSS auront toujours la priorité</li>
<li>Quelqu'un peut péter les styles d'un composant pour peu qu'il ne sache pas qu'un sélecteur est utilisé ailleurs</li>
</ul>
<h3 id="la-spécificité"><a href="#la-sp%C3%A9cificit%C3%A9" class="phenomic-HeadingAnchor">#</a>La spécificité</h3>
<p>Alors ça, c'est particulièrement drôle : la spécificité d'un sélecteur va définir la priorité d'application d'un style.</p>
<table>
<thead>
<tr>
<th>Sélecteur</th>
<th>Spécificité</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>0,0,0,0</td>
</tr>
<tr>
<td><code>li</code></td>
<td>0,0,0,1</td>
</tr>
<tr>
<td><code>li:first-line</code></td>
<td>0,0,0,2</td>
</tr>
<tr>
<td><code>ul li</code></td>
<td>0,0,0,2</td>
</tr>
<tr>
<td><code>ul ol+li</code></td>
<td>0,0,0,3</td>
</tr>
<tr>
<td><code>h1 + *[rel=up]</code></td>
<td>0,0,1,1</td>
</tr>
<tr>
<td><code>ul ol li.red</code></td>
<td>0,0,1,3</td>
</tr>
<tr>
<td><code>li.red.level</code></td>
<td>0,0,2,1</td>
</tr>
<tr>
<td><code>#x34y</code></td>
<td>0,1,0,0</td>
</tr>
</tbody>
</table>
<p>Si le style est défini dans l'attribut <code>style</code>, la spécificité est de 1,0,0,0. Si une valeur associée à une propriété est suffixée d'un <code>!important</code>, elle prend quoi qu'il arrive l'ascendance.</p>
<p>Si on résume, on nage en plein délire, la priorité se définit dans l'ordre par : la présence de <code>!important</code>, la façon de définir le style, la spécificité du sélecteur utilisé puis par l'ordre de définition dans l'ensemble des CSS de la page. Évidemment, à l'époque où on n'avait qu'une pauvre petite feuille de style pour l'ensemble de son site, ça marchait ; plus maintenant.</p>
<h3 id="les-régressions"><a href="#les-r%C3%A9gressions" class="phenomic-HeadingAnchor">#</a>Les régressions</h3>
<p>Prenons un exemple tout bête :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.item</span> {
  <span class="hljs-attribute">display</span>: block;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;
  <span class="hljs-attribute">color</span>: blue;
}

<span class="hljs-selector-class">.some-context</span> <span class="hljs-selector-class">.item</span> {
  <span class="hljs-attribute">display</span>: inline-block;
  <span class="hljs-attribute">color</span>: red;
}</code></pre>
<p>Quelqu'un de la team modifie <code>.item</code> :</p>
<pre><code class="hljs language-diff"> .item {
   display: block;
   font-size: 1rem;
   color: blue;
<span class="hljs-addition">+  border: 1px solid red;</span>
 }

 .some-context .item {
   display: inline-block;
   color: red;
}</code></pre>
<p>Super, une regression dans <code>some-context</code>. Face à ça, deux possibilités :</p>
<ul>
<li>Vous vous foutez d'avoir des régressions qui pètent votre site</li>
<li>À chaque changement minime du CSS vous vérifiez l'intégralité du site et testez tous les comportements dans tous les contextes.</li>
</ul>
<h3 id="le-choix-de-priorisation-des-styles"><a href="#le-choix-de-priorisation-des-styles" class="phenomic-HeadingAnchor">#</a>Le choix de priorisation des styles</h3>
<p>Ce serait pas mal de décider quel <code>className</code> est appliqué en priorité :</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"blue red"</span>></span>text<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"red blue"</span>></span>text<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></code></pre>
<p>mais bien évidemment non, comme vu plus haut, c'est le foutu ordre de définition des sélecteurs qui décide. Je vous laisse imaginer le bordel si on charge les feuilles de style à la demande, selon les actions utilisateur.</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.blue</span> { <span class="hljs-attribute">color</span>: blue; }
<span class="hljs-selector-class">.red</span> { <span class="hljs-attribute">color</span>: red; }</code></pre>
<p>C'est pire si vous utilisez un préprocesseur tel que Sass et LESS. Lorsque vous faites un :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.blue</span> {
  <span class="hljs-attribute">color</span>: blue;
}

<span class="hljs-selector-class">.red</span> {
  <span class="hljs-attribute">color</span>: red;
}

<span class="hljs-selector-class">.my-selector</span> {
  @extend .red;
  @extend .blue;
}</code></pre>
<p>Vous imaginez que <code>.blue</code> étant appliqué après dans <code>.my-selector</code>, il va prendre la priorité. EH BAH NON, c'est <code>.red</code>, parce que sa déclaration est située après <code>.blue</code>.</p>
<p>Si ce constat peut aussi permettre à ceux et celles qui utilisent des CSS atomiques d'arrêter immédiatement :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.relative</span> { <span class="hljs-attribute">position</span>: relative; }
<span class="hljs-selector-class">.absolute</span> { <span class="hljs-attribute">position</span>: absolute; }
<span class="hljs-selector-class">.static</span> { <span class="hljs-attribute">position</span>: static; }</code></pre>
<p>Dans le cas précédent, si vous ajoutez une classe <code>relative</code> à un élement ayant déjà la classe <code>static</code>, ça ne changera rien du tout, parce que <code>.static</code> est défini après <code>.relative</code>. Génial, non ?</p>
<h3 id="le-futur-de-css"><a href="#le-futur-de-css" class="phenomic-HeadingAnchor">#</a>Le futur de CSS</h3>
<p>Les variables sont une feature qui a été très demandée à CSS. Mais cette feature va débarquer avec son lot de souci :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-pseudo">:root</span> {
  <span class="hljs-attribute">--mainColor</span>: blue;
}

<span class="hljs-selector-tag">body</span> {
  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--mainColor);
}</code></pre>
<p>C'est super, mais si quelqu'un vient ajouter :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-pseudo">:root</span> {
  <span class="hljs-attribute">--mainColor</span>: red;
}</code></pre>
<p>quelque part, il y a deux cas :</p>
<ul>
<li>soit c'est chargé avant, et ça ne fait rien</li>
<li>soit c'est chargé après, et ça override toutes les propriétés utilisant <code>--mainColor</code>. On est bien contents.</li>
</ul>
<h2 id="vous-ne-pouvez-pas-vous-permettre-de-laisser-tomber-css-"><a href="#vous-ne-pouvez-pas-vous-permettre-de-laisser-tomber-css-" class="phenomic-HeadingAnchor">#</a>Vous ne pouvez pas vous permettre de laisser tomber CSS ?</h2>
<p>Dans ce cas, forcez vous à utiliser la <a href="/fr/articles/css/bem/">méthodologie BEM</a>. Ça ne réglera pas tout, mais au moins cela vous permettra d'éviter un maximum de conneries en vous forçant à découper en composants isolés, et à mieux maîtriser la priorisation, puisque le scope auquel vous devrez y veiller sera considérablement réduit :</p>
<pre><code class="hljs language-css"><span class="hljs-comment">/* Header.css */</span>
<span class="hljs-selector-class">.Header</span> {}

  <span class="hljs-selector-class">.Header-nav</span> {}

<span class="hljs-comment">/* Nav.css */</span>
<span class="hljs-selector-class">.Nav</span> {}

  <span class="hljs-selector-class">.Nav-item</span> {}

    <span class="hljs-selector-class">.Nav-item--active</span> {}</code></pre>
<p>C'est quand même plus pratique à comprendre, non ?</p>
<p>Encore mieux, si vous avez du tooling à la webpack, vous pouvez utiliser les <a href="/fr/articles/css/modules/">CSS modules</a>, qui limiteront de même le scope d'application de vos feuilles de style.</p>
<h2 id="vous-pouvez-vous-permettre-de-laisser-tomber-css-"><a href="#vous-pouvez-vous-permettre-de-laisser-tomber-css-" class="phenomic-HeadingAnchor">#</a>Vous pouvez vous permettre de laisser tomber CSS ?</h2>
<p>JavaScript vous permet déjà de bénéficier d'un système de modules, de variables, de conditions, de fonctions réutilisables, et tout ça sans hack. En plus de ça, vous maitrisez la priorisation, parce c'est que c'est vous qui décidez ce qui s'applique :</p>
<pre><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  render() {
    <span class="hljs-keyword">const</span> { active, disabled } = <span class="hljs-keyword">this</span>.props
    <span class="hljs-keyword">return</span> (
      <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span>
        <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span>
          <span class="hljs-attr">...styles.myComponent</span>,
          <span class="hljs-attr">...active</span> ? <span class="hljs-attr">styles.active</span> <span class="hljs-attr">:</span> <span class="hljs-attr">null</span>,
          <span class="hljs-attr">...disabled</span> &#x26;&#x26; !<span class="hljs-attr">active</span> ? <span class="hljs-attr">styles.disabled</span> <span class="hljs-attr">:</span> <span class="hljs-attr">null</span>,
        }}
      ></span>
        tadaa
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
    )
  }
}

<span class="hljs-keyword">const</span> styles = {
  <span class="hljs-attr">myComponent</span>: {
    <span class="hljs-attr">fontSize</span>: <span class="hljs-number">18</span>,
  },
  <span class="hljs-attr">active</span>: {
    <span class="hljs-attr">textDecoration</span>: <span class="hljs-string">"underline"</span>,
  },
  <span class="hljs-attr">disabled</span>: {
    <span class="hljs-attr">opacity</span>: <span class="hljs-number">0.5</span>,
  },
}</code></pre>
<p>Par ailleurs, avec certaines bibliothèques permettant naturellement l'usage d'inline-styles (comme React), cela vous donne la possibilité d'avoir le style et le markup dans le même fichier, sans avoir besoin de naviguer entre les onglets de votre éditeur (vous pouvez cependant séparer en plusieurs fichiers si ça vous fait plaisir).</p>
<p>En résumé, utiliser JS pour définir et appliquer les styles vous permet de prendre le contrôle sur le styling de vos composants, tout en apportant le confort d'un langage offrant naturellement de nombreux avantages. Si vous êtes bloqués avec CSS, partez sur les CSS modules ou la méthologie BEM selon vos possibilités. Le but, c'est d'éliminer les <a href="https://github.com/necolas/react-native-web/blob/master/docs/guides/style.md">7 maux de CSS</a>.</p>
<p>Bisous bisous.</p>
<h2 id="edit"><a href="#edit" class="phenomic-HeadingAnchor">#</a>Edit</h2>
<p>Afin de répondre aux diverses incompréhensions et commentaires en réponse à l’article, voilà un follow-up qui va tenter d’aller plus en profondeur dans la critique de CSS.</p>
<p>Je vais donc répondre à <a href="http://www.glazman.org/weblog/dotclear/index.php?post/2016/06/18/Pourquoi-il-n-aurait-pas-du-arr%C3%AAter-d-utiliser-CSS">l’article de Daniel Glazman</a>, ancien co-chairman du CSS Working Group.</p>
<p>Le premier point n’a rien à voir avec le sujet, mais l’auteur fait un parallèle entre la réassignation dans JS et la mutabilité et absence de scope des sélecteurs CSS. La comparaison n’a pas lieu d’être, parce que JS est un langage de programmation. De plus, en JS, les variables ont une portée, et l’opérateur <code>const</code> existe pour prévenir la réassignation. <code>&#x3C;/digression></code></p>
<p>Le grand problème de l’état actuel des sélecteurs CSS, c’est qu’ils n’offrent naturellement aucune API (hors <em>Shadow DOM</em>) permettant de limiter le scope d’un sélecteur sans augmenter sa spécificité. Si je veux ajouter des propriétés de style à un élément comportant un certain sélecteur dans un certain contexte, je suis obligé d’avoir connaissance de tous les sélecteurs correspondant potentiellement à cet éléments, de vérifier leur spécificité, et possiblement d’adapter le sélecteur simple que j’envisageais à l’origine pour pallier le manque de spécificité. Super, ma codebase contient maintenant des sélecteurs différents de leur sens original dans le simple but de les appliquer.</p>
<p>Lorsque je lis la réaction épidermique de l’auteur face à BEM, une méthodologie ajoutant un namespace pour simuler ce scope côté utilisateur qui apporte un minimum de sécurité lorsque l’on travaille sur un projet à grande échelle, j’avoue un peu flipper quant à la conception des spécifications CSS.</p>
<p>BEM est une réponse de la communauté d’utilisateurs à plusieurs soucis qu’ils ont rencontrés dans leurs utilisations variées de CSS. On dirait même dans sa réponse qu’il n’a pas pris le temps de se renseigner sur la nature de la méthodologie, qui ne consiste selon lui qu’à ajouter des indentations dont on se fout parce que CSSOM les ignore. WTF.</p>
<p>Ignorer le feedback que constitue l’apparition de cette méthodologie et dénigrer les utilisateurs pour qui elle règle des problèmes posés par le laxisme du langage, ça ne fait pas avancer le langage, et ça ne donnera certainement pas envie de retourner à CSS.</p>
<p>Concernant la spécificité des sélecteurs, évidemment qu’une quantité astronomique de sites utilise les sélecteurs CSS, simplement parce qu’ils n’ont pas eu d’alternative viable. Ça n’en fait pas une fonctionnalité bien conçue pour autant.</p>
<p>Sur les régressions, l’idée à comprendre, c’est que l’absence de scope et de namespace dans le langage peut créer des régressions potentiellement partout dans un large site, parce qu’un sélecteur est global. Il n’y a pas moyen de sécuriser un rayon d’action pour travailler, à moins de gérer le namespace soi-même, dans le sélecteur.</p>
<p>Concernant le choix de priorisation des styles, c'est un fait que l'ordre de la <code>DOMTokenList</code> n’a pas d'importance actuellement, et je ne fais que déplorer qu’en utilisant des sélecteurs, le choix de l’application des styles ne puisse pas se faire à l’endroit où l’élément est utilisé, avec la connaissance précise de son contexte.</p>
<p>Sur le futur de CSS, le reproche que je dresse n'est pas comme ce qui est interprété dans le post de l'auteur, disant que je râle parce que si l'on fait un parallèle avec JS, on aurait :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>
<span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>
alert(a)
<span class="hljs-comment">// alerts 2</span></code></pre>
<p>C’est un comportement parfaitement attendu. Et ce n’est pas ce que j’ai dit, je reproche à CSS de faire en sorte que, si l’on fait encore le parallèle :</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// coucou c'est CSS</span>
<span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>
alert(a)
<span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>
<span class="hljs-comment">// alerts 2</span></code></pre>
<p>Sur ma proposition alternative, outre être <em>“une horreur non-maintenable, verbeuse et error-prone”</em>, on va regarder ce que ça donne sur un cas plus simple :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> React, { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-comment">// un système de modules analysable statiquement</span>
<span class="hljs-keyword">import</span> { mainBlue, mainRed } <span class="hljs-keyword">from</span> <span class="hljs-string">"../utils/Colors"</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (props) => {
  <span class="hljs-keyword">return</span> (
    <span class="hljs-comment">// on peut appliquer un style dont le rayon d'action est par définition</span>
    <span class="hljs-comment">// limité à l’élément sur lequel on le place</span>
    &#x3C;div style={styles.container}>
      {list.map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =></span>
        &#x3C;div style={styles.item}>
          <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">span</span>
            <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span>
              <span class="hljs-attr">...styles.text</span>,
              // <span class="hljs-attr">appliquer</span> <span class="hljs-attr">un</span> <span class="hljs-attr">style</span> <span class="hljs-attr">conditionn</span>é <span class="hljs-attr">par</span> <span class="hljs-attr">le</span> <span class="hljs-attr">contexte</span> <span class="hljs-attr">est</span> <span class="hljs-attr">tr</span>è<span class="hljs-attr">s</span> <span class="hljs-attr">simple</span>
              // <span class="hljs-attr">et</span> <span class="hljs-attr">permet</span> <span class="hljs-attr">de</span> <span class="hljs-attr">prioriser</span> à <span class="hljs-attr">la</span> <span class="hljs-attr">d</span>é<span class="hljs-attr">finition</span> <span class="hljs-attr">du</span> <span class="hljs-attr">markup</span>
              <span class="hljs-attr">...index</span> % <span class="hljs-attr">2</span> === <span class="hljs-string">0</span> &#x26;&#x26; <span class="hljs-attr">styles.oddText</span>,
            }}
          ></span>
            {item.text}
          <span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span></span>
        &#x3C;<span class="hljs-regexp">/div>
      )}
    &#x3C;/</span>div>
  )
}

<span class="hljs-comment">// la feuille de style est limitée au module</span>
<span class="hljs-keyword">const</span> styles = {
  <span class="hljs-attr">container</span>: {
    <span class="hljs-attr">display</span>: <span class="hljs-string">"flex"</span>,
    <span class="hljs-attr">flexDirection</span>: <span class="hljs-string">"row"</span>,
  },
  <span class="hljs-attr">item</span>: {
    <span class="hljs-attr">flexBasis</span>: <span class="hljs-number">200</span>,
  },
  <span class="hljs-attr">text</span>: {
    <span class="hljs-comment">// peut utiliser des variables qui ne seront pas écrasées si j'en définis</span>
    <span class="hljs-comment">// une avec le même nom ailleurs dans l'app</span>
    color: mainBlue,
  },
  <span class="hljs-attr">oddText</span>: {
    <span class="hljs-attr">color</span>: mainRed,
  },
}</code></pre>
<p>C’est juste une application d’une approche centrée sur les composants. L’important, c’est d’isoler ces composants pour les rendre facilement réutilisables, prévenir les effets de bord, et passer moins de temps à essayer de travailler avec des propriétés du langage qui nous gênent dans notre travail de tous les jours. Réduire la liberté d’utilisation permet ici d’apporter des propriétés (immutabilité des styles, application déterministe des styles, scope) qui nous permettent de raisonner notre code de manière beaucoup plus simple.</p>
<p>Si l’on regarde du côté des CSS modules, qu’est-ce que ça fait exactement ? La même chose. Le tooling va limiter le scope d’une feuille de style en rendant opaques et globalement uniques les sélecteurs. Le CSS peut être utilisé en target de compilation sans problème, et la plupart des solutions rendant son utilisation confortable font une chose simple : contraindre à une utilisation plus stricte en masquant des parties trop laxistes du langage. C’est ce que le tooling JS a connu depuis quelques années, et on ne s’en porte que mieux.</p>
<p>Le dernier argument utilisé est que « si le monde entier a adopté CSS (y compris le monde de l'édition qui vient pourtant de solutions assez radicalement différentes du Web), c'est bien parce que c'est bien et que ça marche ». Qu’est-ce qu’on peut répondre sinon que CSS a été adopté avant que les besoins du web n'aient suffisamment évolué pour que CSS dans son état actuel ait un énorme potentiel de fragilisation d’une codebase. Ne pas remettre en question le langage parce que ses utilisateurs n’ont pas d’alternative, c’est condamner le langage. C’est comme si la SNCF disait « BOARF ça sert à rien de faire arriver les trains à l’heure, vu que tout le monde le prend déjà c’est que c’est nickel ». Du coup, faut pas venir s’étonner que certains de ces utilisateurs aillent chercher des alternatives ailleurs.</p>
<p>En conclusion, je déplore vraiment l'absence d'intérêt apparent de l'auteur pour écouter le feedback des utilisateurs sur les problèmes d'un langage. Il faut regarder ailleurs, et ne pas ignorer ou mépriser ce que les utilisateurs font de leur côté pour travailler plus sainement, ça pourrait même donner des idées pour améliorer ce qui fait perdre du temps aux utilisateurs.</p>
]]></description><link>http://putaindecode.io/fr/articles/css/stop-css/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/css/stop-css/</guid><pubDate>Thu, 16 Jun 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Les patterns Provider & Higher-Order Component avec React]]></title><description><![CDATA[<h2 id="le-pattern-provider"><a href="#le-pattern-provider" class="phenomic-HeadingAnchor">#</a>Le pattern provider</h2>
<p>Beaucoup de bibliotèques React ont besoin de faire passer des data au travers de tout l'arbre de composants de votre app. Par exemple Redux a besoin de passer son <em>store</em> et React Router doit passer l'objet <em>location</em>. Tout ça pourrait possiblement passer par du <em>shared mutable state</em> (état global mutable, ce qui est rarement une bonne idée). Le <em>shared mutable state</em> rend impossible une application à plus d'un contexte. En d'autres mots, ça ne marcherait que sur le client, où l'état global correspond à celui de l'utilisateur. Si vous décidez de rendre la page côté serveur, c'est impossible de reposer sur une telle implémentation : cet état ne doit pas dépasser le scope de la requête courante au serveur.</p>
<p>Coup de bol, l'API de React nous offre une solution à ce problème: le <a href="http://facebook.github.io/react/docs/context.html"><code>context</code></a>. Si l'on résume sa nature, c'est comme l'objet global de votre arbre de composants.</p>
<p>Le <code>context</code> fonctionne de la façon suivante:</p>
<ul>
<li>On définit haut dans notre app un <code>context</code> que l'on donne aux composants descendants de l'app</li>
<li>On récupère ce contexte dans les composants descendants.</li>
</ul>
<p>Du coup, pour <em>donner</em> ce <code>context</code>, on doit avoir un <code>Provider</code>. Son rôle est simplement de fournir un <code>context</code> pour que les composants enfants y aient accès.</p>
<p>On va illustrer ce pattern avec un use-case très simple : dans notre app, les utilisateurs peuvent customiser le thème.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> React, { Component, PropTypes, Children } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThemeProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  <span class="hljs-comment">// la méthode getChildContext est appelée pour fournir le `context`</span>
  <span class="hljs-comment">// dans notre cas, on le récupère des `props`</span>
  getChildContext() {
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">theme</span>: <span class="hljs-keyword">this</span>.props.theme,
    }
  }
  <span class="hljs-comment">// on render l'enfant</span>
  render() {
    <span class="hljs-keyword">return</span> Children.only(<span class="hljs-keyword">this</span>.props.children)
  }
}

ThemeProvider.propTypes = {
  <span class="hljs-attr">theme</span>: PropTypes.object.isRequired,
}

<span class="hljs-comment">// pour que React prenne en compte le context fourni,</span>
<span class="hljs-comment">// on doit définir les types des propriétés que l'on passe</span>
ThemeProvider.childContextTypes = {
  <span class="hljs-attr">theme</span>: PropTypes.object.isRequired,
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ThemeProvider</code></pre>
<p>Pour utiliser le provider, il suffit de wrapper notre app avec:</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">"react-dom"</span>

<span class="hljs-keyword">import</span> ThemeProvider <span class="hljs-keyword">from</span> <span class="hljs-string">"ThemeProvider"</span>
<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">"App"</span>

<span class="hljs-keyword">const</span> theme = {
  <span class="hljs-attr">color</span>: <span class="hljs-string">"#cc3300"</span>,
  <span class="hljs-attr">fontFamily</span>: <span class="hljs-string">"Georgia"</span>,
}

ReactDOM.render(
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">ThemeProvider</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">{theme}</span>></span>
    </span>&#x3C;App /><span class="xml">
  <span class="hljs-tag">&#x3C;/<span class="hljs-name">ThemeProvider</span>></span></span>,
  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">"#App"</span>)
)</code></pre>
<p>Maintenant que notre <code>theme</code> est bien ajouté au <code>context</code>, on a besoin d'un moyen simple pour que nos composants dans l'app puissent le consommer. Ça nous amène au second pattern.</p>
<h2 id="le-pattern-higher-order-component"><a href="#le-pattern-higher-order-component" class="phenomic-HeadingAnchor">#</a>Le pattern Higher-Order Component</h2>
<p>Afin de consommer le <code>context</code>, un component doit définir une propriété statique <code>contextTypes</code> stipulant quelles propriétés le composant souhaite récupérer. On pourrait le définir sur chaque composant, mais cela serait une mauvaise idée pour deux raisons :</p>
<ul>
<li><strong>La maintenabilité</strong> : si à un moment, on a besoin de refacto, avoir tous ces <code>contextTypes</code> éparpillés dans notre repository peut faire bien mal.</li>
<li><strong>La complexité</strong>: L'API des <code>context</code> étant encore obscure pour beaucoup, il est préférable de faire une abstraction pour la masquer.</li>
</ul>
<p>Une autre solution serait d'utiliser l'héritage d'une sous-classe de <code>ReactComponent</code>. Ça ne marche pas pour deux raisons:</p>
<ul>
<li>Plus d'un niveau d'héritage est en général une idée de merde. Cela mène souvent à des conflits entre méthodes, et force à vérifier toute la chaîne d'héritage à chaque fois que l'on souhaite modifier quelque chose. L'API des <code>mixins</code> de <code>React.createClass</code> réglait ce souci en définissant des comportements de merge selon les méthodes, mais cela rend encore plus obscure la compréhension du fonctionnement de nos composants.</li>
<li>Si l'on veut des APIs <strong>interopérables</strong>, on ne peut pas partir de l'héritage. React offre trois moyens de définir un composant: <code>class extends React.Component {}</code>, <code>React.createClass({})</code> et <code>(props) => ReactElement</code>. Les deux derniers ne peuvent pas bénéficier de l'héritage.</li>
</ul>
<p>La meilleure façon de créer une fonctionnalité réutilisable est d'utiliser le pattern du <strong>Higher Order Component</strong> (ou <em>HOC</em>). Ce que ça veut dire, c'est qu'on va simplement wrapper un composant dans un autre, lequel a pour unique rôle d'injecter la fonctionnalité et de la passer via les <code>props</code>. Il s'agit tout bêtement du principe de composition : au lieu d'exporter <code>A</code>, vous exportez <code>Wrapped(A)</code>, et ce dernier retourne un composant React qui va appeler <code>A</code> dans sa méthode <code>render</code>.</p>
<p>Pour le voir simplement, il s'agit d'un point intermédiaire dans l'arbre de vos composants, qui injecte quelques <code>props</code>. Il existe beaucoup d'avantages apportés par ce pattern :</p>
<ul>
<li><strong>Isolation</strong> : Il n'y a pas de risque de collision de propriétés au sein du composant.</li>
<li><strong>Interopérabilité</strong> : Ce principe s'adapte à tout composant React, peu importe la façon dont il a été défini.</li>
<li><strong>Maintenabilité</strong> : Le wrapper n'aura qu'une seule fonctionnalité, ce qui le rend plus simple à comprendre. De plus, si l'on utilise le <code>context</code>, on ne trouvera le mapping <code>contextTypes</code> qu'à un seul endroit dans l'app.</li>
</ul>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> React, { Component, PropTypes } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

<span class="hljs-keyword">const</span> themed = <span class="hljs-function">(<span class="hljs-params">ComponentToWrap</span>) =></span> {
  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThemeComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
    render() {
      <span class="hljs-keyword">const</span> { theme } = <span class="hljs-keyword">this</span>.context
      <span class="hljs-comment">// le component va render `ComponentToWrap`</span>
      <span class="hljs-comment">// mais il va y ajouter la prop `theme`, qu'il récupère du `context`</span>
      <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">ComponentToWrap</span> {…<span class="hljs-attr">this.props</span>} <span class="hljs-attr">theme</span>=<span class="hljs-string">{theme}</span> /></span>
      )
    }
  }
  // on définit ce qu'on veut consommer du `context`
  ThemeComponent.contextTypes = {
    theme: PropTypes.object.isRequired,
  }

  // on retourne notre wrapper
  return ThemeComponent
}
export default themed</span></code></pre>
<p>Pour utiliser notre HOC, il suffira d'exporter nos composants wrappés :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"React"</span>
<span class="hljs-keyword">import</span> themed <span class="hljs-keyword">from</span> <span class="hljs-string">"themed"</span>

<span class="hljs-keyword">const</span> MyStatelessComponent = <span class="hljs-function">(<span class="hljs-params">{ text, theme }</span>) =></span> (
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">color:</span> <span class="hljs-attr">theme.color</span> }}></span>
    {text}
  <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
)

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> themed(MyStatelessComponent)</code></pre>
<p>Puisqu'il s'agit simplement d'une fonction, on peut y passer des options à l'aide d'une simple closure.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> defaultMergeProps = <span class="hljs-function">(<span class="hljs-params">ownProps, themeProps</span>) =></span> ({  ...ownProps, ...themeProps })

<span class="hljs-keyword">const</span> theme = <span class="hljs-function">(<span class="hljs-params">mergeProps = defaultMergeProps</span>) =></span>
  (ComponentToWrap) => {
    <span class="hljs-comment">// …</span>
    render() {
      <span class="hljs-keyword">const</span> { theme } = <span class="hljs-keyword">this</span>.context
      <span class="hljs-keyword">const</span> props = mergeProps(<span class="hljs-keyword">this</span>.props, { theme })
      <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">ComponentToWrap</span> {…<span class="hljs-attr">props</span>} /></span>
      )
    }
    // …
  }</span></code></pre>
<p>et l'utiliser de cette façon :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> mergeProps = <span class="hljs-function">(<span class="hljs-params">ownProps, themeProps</span>) =></span> ({ ...themeProps, <span class="hljs-attr">color</span>: themeProps.theme.color })
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> theme(mergeProps)(MyComponent)</code></pre>
<p>Une astuce sympathique lorsque vous utilisez plusieurs HOC, c'est de les composer, puisque <code>compose(A, B, C)(props)</code> vaudra <code>A(B(C(props)))</code>, par exemple :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> composed = compose(
  connect(mapStateToProps),
  theme()
)

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> composed(MyComponent)</code></pre>
<p>Bisous bisous.</p>
]]></description><link>http://putaindecode.io/fr/articles/js/react/higher-order-component/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/react/higher-order-component/</guid><pubDate>Tue, 14 Jun 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Redux, comment ça marche ?]]></title><description><![CDATA[<p>Alors si vous faites du développement web et que vous ne vivez pas dans une cave, vous avez certainement déjà entendu parler de <a href="http://redux.js.org">Redux</a>.</p>
<h2 id="kesako-"><a href="#kesako-" class="phenomic-HeadingAnchor">#</a>Kesako ?</h2>
<p>Redux est une implémentation dérivée de Flux. Ça permet de créer un <strong>Store</strong> qui contient un <strong>état</strong>, réagit à des <strong>actions dispatchées</strong>, et auquel on peut <strong>souscrire</strong> pour être notifié des changements. Il permet également l'ajout de <strong>middlewares</strong>, qui peuvent en quelque sorte <em>pre-process</em> les actions.</p>
<p>Du coup, on va écrire une implémentation de Redux pour mieux décomposer son fonctionnement.</p>
<h2 id="1-gérer-létat"><a href="#1-g%C3%A9rer-l%C3%A9tat" class="phenomic-HeadingAnchor">#</a>1. Gérer l'état</h2>
<p>Redux se distingue par son mécanisme d'update de l'état, puisqu'il est décrit dans des <strong>reducers</strong>. Vous connaissez <a href="/fr/articles/js/array-reduce/"><code>Array.prototype.reduce</code></a> ? Eh ben votre <strong>reducer</strong> a exactement la même signature que la fonction de <code>reduce</code>.</p>
<p>Pour faire simple, votre état vaudra toujours :</p>
<pre><code class="hljs language-javascript">dispatchedActions.reduce(reducer, <span class="hljs-literal">undefined</span>)</code></pre>
<p>Si ça vous paraît un peu abstrait, prenons un exemple tout con de reducer :</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// on part de 0</span>
<span class="hljs-keyword">const</span> initialState = { <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span> }

<span class="hljs-keyword">const</span> counter = <span class="hljs-function">(<span class="hljs-params">state = initialState, action</span>) =></span> {
  <span class="hljs-keyword">switch</span>(action.type) {
    <span class="hljs-comment">// selon l'action …</span>
    <span class="hljs-keyword">case</span> <span class="hljs-string">"INCREMENT"</span>:
      <span class="hljs-comment">// … on retourne un nouvel état incrémenté</span>
      <span class="hljs-keyword">return</span> { <span class="hljs-attr">counter</span>: state.counter + <span class="hljs-number">1</span> }
    <span class="hljs-keyword">case</span> <span class="hljs-string">"DECREMENT"</span>:
      <span class="hljs-comment">// … ou décrémenté</span>
      <span class="hljs-keyword">return</span> { <span class="hljs-attr">counter</span>: state.counter - <span class="hljs-number">1</span> }
    <span class="hljs-keyword">default</span>:
      <span class="hljs-comment">// ou l'état actuel, si l'on n'y touche pas</span>
      <span class="hljs-keyword">return</span> state
  }
}</code></pre>
<p>Le petit <code>state = initialState</code> c'est un <a href="/fr/articles/js/es2015/defaults/">paramètre avec une valeur par défaut</a>, si vous avez bien vu le bout de code avec le <code>reduce</code> un peu plus haut, on passe la valeur <code>undefined</code> comme accumulateur initial, ça permet d'avoir un state valant <code>initialState</code> au passage de la première action.</p>
<p>Le <code>switch</code> permet de retourner un nouvel état selon les actions passées, avec un <code>default</code> qui retourne l'état actuel, dans le cas où on se fout de l'action dans ce reducer.</p>
<p>C'est parti pour implémenter ça :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> createStore = <span class="hljs-function">(<span class="hljs-params">reducer</span>) =></span> {
  <span class="hljs-comment">// on balance une première action "opaque",</span>
  <span class="hljs-comment">// qui ne sera pas traitée par le reducer, histoire de commencer avec un état</span>
  <span class="hljs-keyword">let</span> state = reducer(<span class="hljs-literal">undefined</span>, { <span class="hljs-attr">type</span>: <span class="hljs-string">"@@INIT"</span> })
  <span class="hljs-keyword">return</span> {
    <span class="hljs-comment">// une méthode pour dispatcher les actions</span>
    dispatch: <span class="hljs-function">(<span class="hljs-params">action</span>) =></span> {
      state = reducer(state, action)
    },
    <span class="hljs-comment">// une méthode pour récupérer le state</span>
    getState: <span class="hljs-function"><span class="hljs-params">()</span> =></span> state
  }
}</code></pre>
<p>Super, on peut écrire et lire notre état.</p>
<h2 id="2-le-mécanisme-de-souscription"><a href="#2-le-m%C3%A9canisme-de-souscription" class="phenomic-HeadingAnchor">#</a>2. Le mécanisme de souscription</h2>
<p>Pour pouvoir signaler aux intéressés que des updates ont eu lieu sur l'état, on doit ajouter un mécanisme de souscription : un bête event emitter.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> createStore = <span class="hljs-function">(<span class="hljs-params">reducer</span>) =></span> {
  <span class="hljs-keyword">let</span> state = reducer(<span class="hljs-literal">undefined</span>, { <span class="hljs-attr">type</span>: <span class="hljs-string">"@@INIT"</span> })
  <span class="hljs-comment">// on crée un `Set` où l'on va stocker les listeners</span>
  <span class="hljs-keyword">const</span> subscribers = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>()
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">dispatch</span>: <span class="hljs-function">(<span class="hljs-params">action</span>) =></span> {
      state = reducer(state, action)
      <span class="hljs-comment">// à chaque dispatch, on appelle les subscribers</span>
      subscribers.forEach(<span class="hljs-function">(<span class="hljs-params">func</span>) =></span> func())
    },
    <span class="hljs-attr">subscribe</span>: <span class="hljs-function">(<span class="hljs-params">func</span>) =></span> {
      <span class="hljs-comment">// on ajoute `func` à la liste de subscribers</span>
      subscribers.add(func)
      <span class="hljs-comment">// et on retourne une fonction permettant d'unsubscribe</span>
      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
        subscribers.delete(func)
      }
    },
    <span class="hljs-attr">getState</span>: <span class="hljs-function"><span class="hljs-params">()</span> =></span> state
  }
}</code></pre>
<p>Ayé, le mécanisme est en place.</p>
<h2 id="3-combiner-les-reducers"><a href="#3-combiner-les-reducers" class="phenomic-HeadingAnchor">#</a>3. Combiner les reducers</h2>
<p>Maintenant ce qui serait pas mal, ce serait de permettre d'avoir plusieurs reducers, afin de pouvoir les découper et d'éviter d'avoir du gros code bloated qui tâche. Pour ce faire, on va créer la fonction <code>combineReducers</code> qui va prendre un objet contenant des reducers, et transformer ça en un seul reducer qui va retourner un objet de la même forme, avec l'état retourné par le reducer de la même clé.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> combineReducers = <span class="hljs-function">(<span class="hljs-params">reducers</span>) =></span> {
  <span class="hljs-keyword">const</span> reducersKeys = <span class="hljs-built_in">Object</span>.keys(reducers)
  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">state = {}, action</span>) =></span> {
    <span class="hljs-keyword">return</span> reducersKeys.reduce(<span class="hljs-function">(<span class="hljs-params">acc, key</span>) =></span> {
      acc[key] = reducers[key](state[key], action)
      <span class="hljs-keyword">return</span> acc
    }, {})
  }
}</code></pre>
<p>Maintenant, on peut bien séparer ses reducers :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { users } <span class="hljs-keyword">from</span> <span class="hljs-string">"./reducers/user"</span>
<span class="hljs-keyword">import</span> { tweets } <span class="hljs-keyword">from</span> <span class="hljs-string">"./reducers/tweets"</span>

<span class="hljs-keyword">const</span> reducer = combineReducers({
  users,
  tweets,
})

<span class="hljs-keyword">const</span> store = createStore(reducer)</code></pre>
<h2 id="4-permettre-lajout-de-middlewares"><a href="#4-permettre-lajout-de-middlewares" class="phenomic-HeadingAnchor">#</a>4. Permettre l'ajout de middlewares</h2>
<p>Les middlewares apportent toute la liberté de personalisation de Redux. L'un des plus populaires est le <a href="https://github.com/gaearon/redux-thunk"><em>thunk middleware</em></a>, qui permet de passer une fonction à la place d'une action, et de dispatcher depuis cette fonction, ce qui peut s'avérer très utile pour gérer des réponses asynchrones.</p>
<p>On va donc créer une fonction <code>applyMiddleware</code>, qui va enrichir un store en ajoutant une sorte de hook sur sa méthode dispatch.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// compose(a, b, c) équivaut à (...args) => a(b(c(...args)))</span>
<span class="hljs-keyword">const</span> compose = <span class="hljs-function">(<span class="hljs-params">...funcs</span>) =></span> {
  <span class="hljs-keyword">const</span> last = funcs[funcs.length - <span class="hljs-number">1</span>]
  <span class="hljs-keyword">const</span> rest = funcs.slice(<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>)
  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =></span> rest.reduceRight(<span class="hljs-function">(<span class="hljs-params">composed, f</span>) =></span> f(composed), last(...args))
}

<span class="hljs-keyword">const</span> applyMiddleware = <span class="hljs-function">(<span class="hljs-params">...middlewares</span>) =></span> {
  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">store</span>) =></span> {
    <span class="hljs-comment">// cette API sera passée à chaque middleware, afin qu'il puisse récupérer</span>
    <span class="hljs-comment">// l'état en cours et dispatcher des actions</span>
    <span class="hljs-keyword">const</span> middlewareAPI = {
      <span class="hljs-attr">getState</span>: store.getState,
      <span class="hljs-attr">dispatch</span>: <span class="hljs-function">(<span class="hljs-params">action</span>) =></span> dispatch(action)
    }
    <span class="hljs-keyword">const</span> chain = middlewares.map(<span class="hljs-function">(<span class="hljs-params">middleware</span>) =></span> middleware(middlewareAPI))
    <span class="hljs-keyword">let</span> dispatch = compose(...chain)(store.dispatch)
    <span class="hljs-keyword">return</span> {
      ...store,
      dispatch,
    }
  }
}</code></pre>
<blockquote>
<p>NOTE: l'API de Redux prend <code>createStore</code> plutôt que <code>store</code> en paramètre, la différence est volontaire dans cette démarche de simplification</p>
</blockquote>
<p>Voilà, maintenant on peut faire</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> thunk = <span class="hljs-function">(<span class="hljs-params">{ dispatch, getState }</span>) =></span> (next) => <span class="hljs-function">(<span class="hljs-params">action</span>) =></span> {
  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> action === <span class="hljs-string">"function"</span>) {
    <span class="hljs-keyword">return</span> action(dispatch, getState)
  }
  <span class="hljs-keyword">return</span> next(action)
}

<span class="hljs-keyword">const</span> store = applyMiddleware(thunk)(createStore(reducer))

<span class="hljs-comment">// et maintenant on peut faire</span>
store.dispatch(<span class="hljs-function">(<span class="hljs-params">dispatch, getState</span>) =></span> {
  dispatch({ <span class="hljs-attr">type</span>: <span class="hljs-string">"FOO"</span> })
  setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =></span> {
    dispatch({ <span class="hljs-attr">type</span>: <span class="hljs-string">"BAR"</span> })
  })
})</code></pre>
<p>Voilà voilà, j'espère que cet article a pu vous éclairer un petit peu sur le fonctionnement de Redux et vous permettra de l'aborder avec plus de serénité.</p>
<p>Zoub'</p>
]]></description><link>http://putaindecode.io/fr/articles/js/redux/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/redux/</guid><pubDate>Thu, 09 Jun 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction à Flow, pour du code qui tourne du premier coup]]></title><description><![CDATA[<pre><code class="hljs language-javascript"><span class="hljs-built_in">document</span>.body.firstChild.getBoundingClientRect()</code></pre>
<p>Cette hypothétique ligne de code ne fonctionne pas tout le temps.</p>
<p>La raison c'est que <code>element.firstChild</code> est un <code>Node</code> et que tous les <code>Node</code> ne possèdent pas la méthode <code>getBoundingClientRect</code>, que l'on trouve systématiquement sur les <code>Element</code>, une classe héritant de <code>Node</code>.</p>
<p>Ce type d'erreur est assez commun, et malheureusement JavaScript n'en fout pas une pour nous prévenir que <em>attention là ça peut merder</em>. Le langage préfère nous prévenir au <em>runtime</em>, quand c'est déjà trop tard, parce que le bug s'est produit.</p>
<p>Et c'est parce que JavaScript est un langage … à typage <strong>faible</strong> et <strong>dynamique</strong>.</p>
<p>Faible, parce que si l'on effectue une opération entre deux valeurs ayant des types incompatibles, JavaScript va essayer de convertir les types de la manière qui lui semble la moins déconnante.</p>
<p>Exemple <em>feat. la conscience de JavaScript™</em></p>
<pre><code class="hljs language-javascript"><span class="hljs-string">"1"</span> + <span class="hljs-number">1</span>
<span class="hljs-comment">// bon alors, vu que la string peut être à peu près n'importe quoi,</span>
<span class="hljs-comment">// y'a un bon risque pour qu'une conversion en chiffre donne NaN,</span>
<span class="hljs-comment">// donc on va plutôt convertir le chiffre en string et faire une</span>
<span class="hljs-comment">// concaténation</span>
<span class="hljs-string">"11"</span></code></pre>
<pre><code class="hljs language-javascript"><span class="hljs-string">"1"</span> * <span class="hljs-number">1</span>
<span class="hljs-comment">// putain mais qui a écrit cette merde encore ?</span>
<span class="hljs-comment">// bon ben là si c'est une multiplication j'ai pas le choix,</span>
<span class="hljs-comment">// on va convertir la string en nombre</span>
<span class="hljs-number">1</span></code></pre>
<p>Dynamique, en opposition à statique, parce que les tests de type sont faits au runtime.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> toLowerCase = <span class="hljs-function">(<span class="hljs-params">value</span>) =></span> {
  <span class="hljs-keyword">return</span> value.toLowerCase()
}

toLowerCase(<span class="hljs-number">3</span>)
<span class="hljs-comment">// bon alors, (3).toLowerCase c'est undefined</span>
<span class="hljs-comment">// undefined c'est pas une fonction, ERREUR</span></code></pre>
<h2 id="comment-on-a-fait-jusque-là-"><a href="#comment-on-a-fait-jusque-l%C3%A0-" class="phenomic-HeadingAnchor">#</a>Comment on a fait jusque là ?</h2>
<h3 id="de-la-documentation"><a href="#de-la-documentation" class="phenomic-HeadingAnchor">#</a>De la documentation</h3>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/**
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */</span>
<span class="hljs-keyword">const</span> multiply = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">return</span> a * b
}</code></pre>
<p>Ah bah c'est bien, maintenant toute l'équipe sait quels types sont attendus. Ça n'empêche pas les erreurs au runtime mais au moins on est au courant.</p>
<h3 id="aller-à-fond-dans-le-typage-dynamique"><a href="#aller-%C3%A0-fond-dans-le-typage-dynamique" class="phenomic-HeadingAnchor">#</a>Aller à fond dans le typage dynamique</h3>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> multiply = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> a !== <span class="hljs-string">"number"</span>) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>()
  }
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> b !== <span class="hljs-string">"number"</span>) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>()
  }
  <span class="hljs-keyword">return</span> a * b
}</code></pre>
<p>On peut vérifier les types au runtime pour détecter les bugs possibles de manière plus drastique en dev, on se retrouvera toujours avec un souci en production, qui fera péter le comportement attendu.</p>
<h3 id="faire-comme-si-cétait-pas-grave"><a href="#faire-comme-si-c%C3%A9tait-pas-grave" class="phenomic-HeadingAnchor">#</a>Faire comme si c'était pas grave</h3>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> multiply = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> a !== <span class="hljs-string">"number"</span>) {
    a = <span class="hljs-number">0</span>
  }
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> b !== <span class="hljs-string">"number"</span>) {
    b = <span class="hljs-number">0</span>
  }
  <span class="hljs-keyword">return</span> a * b
}</code></pre>
<p>On peut faire du "defensive programming". Au lieu de laisser le bug arriver, on le tolère. Dans 99% des cas, le résultat ne sera absolument pas celui que l'on attend, et on ne prévient même pas de quand ça foire.</p>
<h2 id="comment-ça-se-passe-ailleurs-"><a href="#comment-%C3%A7a-se-passe-ailleurs-" class="phenomic-HeadingAnchor">#</a>Comment ça se passe ailleurs ?</h2>
<p>D'autres langages utilisent un typage statique, ce qui veut dire que le programme ne compilera pas si les types peuvent être incorrects.</p>
<pre><code class="hljs language-ocaml"><span class="hljs-keyword">let</span> <span class="hljs-keyword">value</span> = <span class="hljs-string">"1"</span>;;

<span class="hljs-keyword">value</span> + <span class="hljs-number">1</span>;;</code></pre>
<p>OCaml, quand vous essayez de faire tourner ce code va vous sortir un gros</p>
<pre><code>File "test.ml", line 3, characters 0-5:
Error: This expression has type string but an expression was expected of type
         int
</code></pre>
<h2 id="et-comment-peut-on-avoir-ça-en-js-"><a href="#et-comment-peut-on-avoir-%C3%A7a-en-js-" class="phenomic-HeadingAnchor">#</a>Et comment peut-on avoir ça en JS ?</h2>
<p>C'est là que <a href="http://flowtype.org">Flow</a> intervient. C'est un outil d'analyse statique de JS. Il détecte les incompatibilités de types au sein du code.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">const</span> multiply = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">return</span> a * b
}

multiply(<span class="hljs-number">1</span>, <span class="hljs-string">"1"</span>)</code></pre>
<pre><code>6: multiply(1, "1")
   ^^^^^^^^^^^^^^^^ function call
3:   return a * b
                ^ string. This type is incompatible with
3:   return a * b
            ^^^^^ number
</code></pre>
<p>Dans le cas précédent, Flow analyse le code et comprend qu'une opération entre <code>string</code> et <code>number</code> comporte une incompatibilité.</p>
<p>Du coup, on peut avoir du code qui tourne du premier coup parce qu'il a éliminé toutes nos petites erreurs bêtes. En prime, ça permet d'arrêter de faire des tests unitaires bateau sur les types.</p>
<p>Flow ajoute par ailleurs une syntaxe pour définir les types attendus dans une situation donnée. On utilise <code>:</code> suivi du type attendu.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-comment">// les types built-ins sont compris naturellement par flow</span>
<span class="hljs-keyword">const</span> foo: string = <span class="hljs-string">"foo"</span>
<span class="hljs-keyword">const</span> bar: number = <span class="hljs-number">3</span>
<span class="hljs-comment">// on peut typer les valeurs contenues dans un array</span>
<span class="hljs-keyword">const</span> baz: <span class="hljs-built_in">Array</span>&#x3C;string> = [<span class="hljs-string">"foo"</span>, <span class="hljs-string">"bar"</span>]
<span class="hljs-comment">// on peut typer des structures</span>
<span class="hljs-keyword">const</span> object: { <span class="hljs-attr">foo</span>: string, <span class="hljs-attr">bar</span>: number } = { foo, bar }
<span class="hljs-comment">// définir des valeurs litérales autorisées</span>
<span class="hljs-keyword">const</span> value: <span class="hljs-string">"enabled"</span> | <span class="hljs-string">"disabled"</span> = <span class="hljs-string">"enabled"</span>
<span class="hljs-comment">// des unions de types</span>
<span class="hljs-keyword">const</span> stringOrNumber: string | number = <span class="hljs-string">"foo"</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">array: Array&#x3C;number></span>): <span class="hljs-title">number</span> </span>{
  <span class="hljs-keyword">return</span> array.reduce(<span class="hljs-function">(<span class="hljs-params">acc, item</span>) =></span> acc + item, <span class="hljs-number">0</span>)
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{
  name: string;
  <span class="hljs-keyword">constructor</span>(name: string) { <span class="hljs-keyword">this</span>.name = name }
}
<span class="hljs-comment">// utiliser la relation prototypale pour typer une valeur</span>
<span class="hljs-keyword">const</span> person: Person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"foo"</span>)</code></pre>
<p>Flow permet également de créer des alias de types, ce qui est essentiel pour les partager au sein d'une codebase. Une syntaxe pour importer les types de fichier existe également. Ces imports sont supprimés du build final.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">import</span> type { MediaType } <span class="hljs-keyword">from</span> <span class="hljs-string">"./MediaType"</span>

<span class="hljs-keyword">export</span> type UserType = {
  <span class="hljs-attr">username</span>: string,
  firstName?: string,
  lastName?: string,
  <span class="hljs-attr">email</span>: string,
  <span class="hljs-attr">avatar</span>: MediaType,
}</code></pre>
<p>Lorsque l'on écrit du code qui se fout du type, on peut utiliser les <em>generics</em>, qui est une sorte de placeholder de type.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-comment">// `T` est ici un type qui sera défini au call-site.</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findLast</span>&#x3C;<span class="hljs-title">T</span>> (<span class="hljs-params">
  array: Array&#x3C;T>,
  func: (item: T, index: number, array: Array&#x3C;T></span>) => <span class="hljs-title">any</span>
): <span class="hljs-title">null</span> | <span class="hljs-title">T</span> </span>{
  <span class="hljs-keyword">let</span> index = array.length
  <span class="hljs-keyword">while</span>(--index >= <span class="hljs-number">0</span>) {
    <span class="hljs-keyword">const</span> item = array[index]
    <span class="hljs-keyword">if</span>(func(item, index, array)) {
      <span class="hljs-keyword">return</span> item
    }
  }
  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>
}

<span class="hljs-comment">// Flow sait que dans ce cas `T` est un nombre</span>
<span class="hljs-keyword">const</span> lastEvenNumber: ?number = findLast(
  [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span> ],
  (item) => item % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>
)</code></pre>
<p>Flow permet également de typer par structure partielle attendue.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-comment">// l'inteface `named` permet de s'assurer que la valeur testée contient</span>
<span class="hljs-comment">// une méthode `getName` retournant une `string`</span>
interface named {
  getName(): string,
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{
  name: string;
  <span class="hljs-keyword">constructor</span>(name: string) {
    <span class="hljs-keyword">this</span>.name = name
  }
  getName() {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name
  }
}

<span class="hljs-keyword">const</span> person: named = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Luke Skywalker"</span>)</code></pre>
<p>React est supporté directement, et Flow peut remplacer les <code>propTypes</code>.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">import</span> React, { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> type { Element <span class="hljs-keyword">as</span> ReactElement } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> type { UserType } <span class="hljs-keyword">from</span> <span class="hljs-string">"../types/UserType"</span>

<span class="hljs-comment">// &#x3C;DefaultProps, Props, State></span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span>&#x3C;<span class="hljs-title">void</span>, <span class="hljs-title">Props</span>, <span class="hljs-title">void</span>> </span>{
  render(): ReactElement {
    <span class="hljs-keyword">return</span> (
      <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span>></span>
        {user.username}
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
    )
  }
}

type Props = {
  <span class="hljs-attr">user</span>: UserType,
}</code></pre>
<h2 id="mais-cest-pas-du-js-valide"><a href="#mais-cest-pas-du-js-valide" class="phenomic-HeadingAnchor">#</a>Mais c'est pas du JS valide</h2>
<p>Pas de panique, pour ça il existe des plugins babel:</p>
<pre><code class="hljs language-console">npm install --<span class="hljs-keyword">save</span>-dev babel-<span class="hljs-keyword">plugin</span>-<span class="hljs-keyword">syntax</span>-flow babel-<span class="hljs-keyword">plugin</span>-transform-flow-strip-types</code></pre>
<p>et vous n'avez plus qu'à ajouter <code>"syntax-flow"</code> et <code>"transform-flow-strip-types"</code> à votre <code>.babelrc</code>.</p>
<h2 id="mais-je-peux-pas-utiliser-babel-sur-mon-projet"><a href="#mais-je-peux-pas-utiliser-babel-sur-mon-projet" class="phenomic-HeadingAnchor">#</a>Mais je peux pas utiliser babel sur mon projet</h2>
<p>C'est ballot, mais tu peux quand même utiliser Flow avec de jolis commentaires.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">const</span> add = (a<span class="hljs-comment">/*: number */</span>, b<span class="hljs-comment">/*: number */</span>)<span class="hljs-comment">/*: number */</span> => {
  <span class="hljs-keyword">return</span> a + b
}

add(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</code></pre>
<p>Allez, maintenant pas d'excuse pour ne pas typer son JS, donc ce serait pas mal d'aller sur <a href="http://flowtype.org/docs/getting-started.html#_">le site de Flow</a> pour en savoir un peu plus.</p>
<p>Bisous bisous.</p>
]]></description><link>http://putaindecode.io/fr/articles/js/flow/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/flow/</guid><pubDate>Tue, 07 Jun 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction to Flow, to make your code run on the first try]]></title><description><![CDATA[<pre><code class="hljs language-javascript"><span class="hljs-built_in">document</span>.body.firstChild.getBoundingClientRect()</code></pre>
<p>This hypothetical line of code doesn't always work.</p>
<p>The reason for this is that <code>element.firstChild</code> is a <code>Node</code>, not all of which have a <code>getBoundingClientRect</code> method, which is always found on <code>Elements</code>, a class that inherits from <code>Node</code>.</p>
<p>This kind of error is rather usual, and unfortunately JavaScript doesn't quite get out of its way to warn us that <em>oi m8 that might not work</em>. JS actually prefers warning us at <em>runtime</em> when it's too late because the bug already happened.</p>
<p>That is because JavaScript is a <strong>weakly/dynamically-typed</strong> language.</p>
<p>Weakly-typed, because if you try to make an operation with two values that have incompatible types, JS will convert those types to ones that it thinks will be the most adequate.</p>
<p>Example <em>feat. JavaScript's Inner Voice™</em></p>
<pre><code class="hljs language-javascript"><span class="hljs-string">"1"</span> + <span class="hljs-number">1</span>
<span class="hljs-comment">// alright alright, so that string might contain absolutely anything</span>
<span class="hljs-comment">// if I tried to make it a number it could become NaN</span>
<span class="hljs-comment">// let's just make the number a string and concatenate both of them</span>
<span class="hljs-string">"11"</span></code></pre>
<pre><code class="hljs language-javascript"><span class="hljs-string">"1"</span> * <span class="hljs-number">1</span>
<span class="hljs-comment">// who the fuck wrote that crap?</span>
<span class="hljs-comment">// okay, that's a multiplication</span>
<span class="hljs-comment">// no choice but to make that string a number</span>
<span class="hljs-number">1</span></code></pre>
<p>Dynamically-typed, contrary to statically-typed, because type tests are made at runtime.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> toLowerCase = <span class="hljs-function">(<span class="hljs-params">value</span>) =></span> {
  <span class="hljs-keyword">return</span> value.toLowerCase()
}

toLowerCase(<span class="hljs-number">3</span>)
<span class="hljs-comment">// uhm. (3).toLowerCase is undefined</span>
<span class="hljs-comment">// undefined ain't a function, ERROR</span></code></pre>
<h2 id="how-did-we-do-so-far"><a href="#how-did-we-do-so-far" class="phenomic-HeadingAnchor">#</a>How did we do so far?</h2>
<h3 id="using-docs"><a href="#using-docs" class="phenomic-HeadingAnchor">#</a>Using docs</h3>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/**
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */</span>
<span class="hljs-keyword">const</span> multiply = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">return</span> a * b
}</code></pre>
<p>Good, now the team knows what types the function needs. It doesn't quite prevent runtime errors from happening but at least, hey, it's something.</p>
<h3 id="going-all-the-way-in-dynamic-typing"><a href="#going-all-the-way-in-dynamic-typing" class="phenomic-HeadingAnchor">#</a>Going all the way in dynamic typing</h3>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> multiply = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> a !== <span class="hljs-string">"number"</span>) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>()
  }
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> b !== <span class="hljs-string">"number"</span>) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>()
  }
  <span class="hljs-keyword">return</span> a * b
}</code></pre>
<p>We can check types at runtime to find possible bugs in a drastic way, but that still doesn't protect us from that one issue that will break our app.</p>
<h3 id="acting-like-its-no-biggie"><a href="#acting-like-its-no-biggie" class="phenomic-HeadingAnchor">#</a>Acting like it's no biggie</h3>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> multiply = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> a !== <span class="hljs-string">"number"</span>) {
    a = <span class="hljs-number">0</span>
  }
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> b !== <span class="hljs-string">"number"</span>) {
    b = <span class="hljs-number">0</span>
  }
  <span class="hljs-keyword">return</span> a * b
}</code></pre>
<p>That's "defensive programming" for you. Instead of preventing the bug from happening, we tolerate it. In 99% of all cases, the result will definitely not be the one you expected and you won't even know when something went wrong.</p>
<h2 id="how-are-other-languages-doing"><a href="#how-are-other-languages-doing" class="phenomic-HeadingAnchor">#</a>How are other languages doing?</h2>
<p>Other languages use static typing, which means the program won't compile if the types are wrong.</p>
<pre><code class="hljs language-ocaml"><span class="hljs-keyword">let</span> <span class="hljs-keyword">value</span> = <span class="hljs-string">"1"</span>;;

<span class="hljs-keyword">value</span> + <span class="hljs-number">1</span>;;</code></pre>
<p>If you try to run the above code, OCaml will grace you with a nice</p>
<pre><code>File "test.ml", line 3, characters 0-5:
Error: This expression has type string but an expression was expected of type
         int
</code></pre>
<h2 id="okay-how-do-we-get-this-in-js"><a href="#okay-how-do-we-get-this-in-js" class="phenomic-HeadingAnchor">#</a>Okay, how do we get this in JS?</h2>
<p>That's the part where <a href="http://flowtype.org">Flow</a>, a static analysis tool for JS, does its magic; it detects typing incompatibilities in your code.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">const</span> add = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">return</span> a + b
}

add(<span class="hljs-number">1</span>, <span class="hljs-string">"1"</span>)</code></pre>
<pre><code>6: multiply(1, "1")
   ^^^^^^^^^^^^^^^^ function call
3:   return a * b
                ^ string. This type is incompatible with
3:   return a * b
            ^^^^^ number
</code></pre>
<p>In the previous case, Flow analyses your code and understands that an operation of a <code>string</code> and a <code>number</code> is not directly possible.
This means we can have code running on the first try every time, because Flow eliminates all our stupid little mistakes. As a bonus, it also avoids useless unit tests on types.</p>
<p>Flow also adds a syntax to define expected types in a given situation. We use <code>:</code> followed by the type the value should have.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-comment">// built-in types are naturally understood by flow</span>
<span class="hljs-keyword">const</span> foo: string = <span class="hljs-string">"foo"</span>
<span class="hljs-keyword">const</span> bar: number = <span class="hljs-number">3</span>
<span class="hljs-comment">// we can add typing to values within an array</span>
<span class="hljs-keyword">const</span> baz: <span class="hljs-built_in">Array</span>&#x3C;string> = [<span class="hljs-string">"foo"</span>, <span class="hljs-string">"bar"</span>]
<span class="hljs-comment">// we can add typing to structures</span>
<span class="hljs-keyword">const</span> object: { <span class="hljs-attr">foo</span>: string, <span class="hljs-attr">bar</span>: number } = { foo, bar }
<span class="hljs-comment">// or define allowed literal values</span>
<span class="hljs-keyword">const</span> value: <span class="hljs-string">"enabled"</span> | <span class="hljs-string">"disabled"</span> = <span class="hljs-string">"enabled"</span>
<span class="hljs-comment">// or type unions</span>
<span class="hljs-keyword">const</span> stringOrNumber: string | number = <span class="hljs-string">"foo"</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">array: Array&#x3C;number></span>): <span class="hljs-title">number</span> </span>{
  <span class="hljs-keyword">return</span> array.reduce(<span class="hljs-function">(<span class="hljs-params">acc, item</span>) =></span> acc + item, <span class="hljs-number">0</span>)
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{
  name: string;
  <span class="hljs-keyword">constructor</span>(name: string) { <span class="hljs-keyword">this</span>.name = name }
}
<span class="hljs-comment">// or even use prototypal relations to add typing to a specific value</span>
<span class="hljs-keyword">const</span> person: Person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"foo"</span>)</code></pre>
<p>Flow allows creation of typing aliases, which is essential to share them within a codebase. A syntax for importing types from a file also exists. Those imports are purged from the build.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">import</span> type { MediaType } <span class="hljs-keyword">from</span> <span class="hljs-string">"./MediaType"</span>

<span class="hljs-keyword">export</span> type UserType = {
  <span class="hljs-attr">username</span>: string,
  firstName?: string,
  lastName?: string,
  <span class="hljs-attr">email</span>: string,
  <span class="hljs-attr">avatar</span>: MediaType,
}</code></pre>
<p>When you write code that doesn't care about types, you can use <em>generics</em> which are kinda like type placeholders.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-comment">// `T here, is a type that will defined at the call-site</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findLast</span>&#x3C;<span class="hljs-title">T</span>> (<span class="hljs-params">
  array: Array&#x3C;T>,
  func: (item: T, index: number, array: Array&#x3C;T></span>) => <span class="hljs-title">any</span>
): <span class="hljs-title">null</span> | <span class="hljs-title">T</span> </span>{
  <span class="hljs-keyword">let</span> index = array.length
  <span class="hljs-keyword">while</span>(--index >= <span class="hljs-number">0</span>) {
    <span class="hljs-keyword">const</span> item = array[index]
    <span class="hljs-keyword">if</span>(func(item, index, array)) {
      <span class="hljs-keyword">return</span> item
    }
  }
  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>
}

<span class="hljs-comment">// Flow knows that in this case, `T` will be a number</span>
<span class="hljs-keyword">const</span> lastEvenNumber: ?number = findLast(
  [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span> ],
  (item) => item % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>
)</code></pre>
<p>Flow also allows typing by expected partial structure.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-comment">// the interface allows to ensure that the tested value contains</span>
<span class="hljs-comment">// a `getName` method that returns a `string`</span>
interface named {
  getName(): string,
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{
  name: string;
  <span class="hljs-keyword">constructor</span>(name: string) {
    <span class="hljs-keyword">this</span>.name = name
  }
  getName() {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name
  }
}

<span class="hljs-keyword">const</span> person: named = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Luke Skywalker"</span>)</code></pre>
<p>React is supported out of the box, and Flow can be used to replace <code>propTypes</code>.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">import</span> React, { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> type { Element <span class="hljs-keyword">as</span> ReactElement } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> type { UserType } <span class="hljs-keyword">from</span> <span class="hljs-string">"../types/UserType"</span>

<span class="hljs-comment">// &#x3C;DefaultProps, Props, State></span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span>&#x3C;<span class="hljs-title">void</span>, <span class="hljs-title">Props</span>, <span class="hljs-title">void</span>> </span>{
  render(): ReactElement {
    <span class="hljs-keyword">return</span> (
      <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span>></span>
        {user.username}
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
    )
  }
}

type Props = {
  <span class="hljs-attr">user</span>: UserType,
}</code></pre>
<h2 id="but-that-isnt-valid-js"><a href="#but-that-isnt-valid-js" class="phenomic-HeadingAnchor">#</a>But that isn't valid JS</h2>
<p>Don't panic, there are babel plugins for that:</p>
<pre><code class="hljs language-console">npm install --<span class="hljs-keyword">save</span>-dev babel-<span class="hljs-keyword">plugin</span>-<span class="hljs-keyword">syntax</span>-flow babel-<span class="hljs-keyword">plugin</span>-transform-flow-strip-types</code></pre>
<p>and then you only have to add <code>"syntax-flow"</code> and <code>"transform-flow-strip-types"</code> to your <code>.babelrc</code>.</p>
<h2 id="what-if-i-cant-use-babel-on-my-project"><a href="#what-if-i-cant-use-babel-on-my-project" class="phenomic-HeadingAnchor">#</a>What if I can't use babel on my project?</h2>
<p>Well first off, sorry for you. But you still can use Flow with nice comments.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">const</span> add = (a<span class="hljs-comment">/*: number */</span>, b<span class="hljs-comment">/*: number */</span>)<span class="hljs-comment">/*: number */</span> => {
  <span class="hljs-keyword">return</span> a + b
}

add(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</code></pre>
<p>Alright, now none of you have any excuses not to type your JS so it would be quite a good idea to go on <a href="http://flowtype.org/docs/getting-started.html#_">Flow's website</a> to learn a little more about it.</p>
<p>Buh-bye.</p>
]]></description><link>http://putaindecode.io/en/articles/js/flow/</link><guid isPermaLink="true">http://putaindecode.io/en/articles/js/flow/</guid><pubDate>Tue, 07 Jun 2016 00:00:00 GMT</pubDate></item></channel></rss>